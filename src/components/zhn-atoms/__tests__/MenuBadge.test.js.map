{"version":3,"sources":["../../../../src/components/zhn-atoms/__tests__/MenuBadge.test.js"],"names":["_fnGetWrapper","props","onBadgeOpenSpy","zhnSpy","createValueSpy","onBadgeCloseSpy","stopPropagationSpy","wrapper","onBadgeOpen","onBadgeClose","simulate","stopPropagation","t","true","isCalledOnce","isOpen"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,WAAO,qBAAQ,8BAAC,mBAAD,EAAeA,KAAf,CAAR,CAAP;AACD,CAFD;;AAIA;;;;;;;;;AASA;;;;;;;;;AAWA,mBAAK,2EAAL,EAAkF,aAAK;AACpF,QAAM;AACH;AACGC,qBAAiBC,iBAAOC,cAAP,EAFvB;AAAA,QAGMC,kBAAkBF,iBAAOC,cAAP,EAHxB;AAAA,QAIME,qBAAqBH,iBAAOC,cAAP,EAJ3B;AAAA,QAKMG,UAAUP,cAAc;AACtBQ,qBAAaN,cADS;AAEtBO,sBAAcJ;AAFQ,KAAd,CALhB;;AAUEE,YAAQG,QAAR,CAAiB,OAAjB,EAA0B,EAAEC,iBAAiBL,kBAAnB,EAA1B;AACAM,MAAEC,IAAF,CAAOP,mBAAmBQ,YAAnB,EAAP;AACAF,MAAEC,IAAF,CAAOX,eAAeY,YAAf,EAAP;AACAF,MAAEC,IAAF,CAAO,CAACR,gBAAgBS,YAAhB,EAAR;AACJ,CAfD;;AAiBA,mBAAK,2EAAL,EAAkF,aAAK;AACrF,QAAMZ,iBAAiBC,iBAAOC,cAAP,EAAvB;AAAA,QACMC,kBAAkBF,iBAAOC,cAAP,EADxB;AAAA,QAEME,qBAAqBH,iBAAOC,cAAP,EAF3B;AAAA,QAGMG,UAAUP,cAAc;AACtBe,gBAAS,IADa;AAEtBP,qBAAaN,cAFS;AAGtBO,sBAAcJ;AAHQ,KAAd,CAHhB;;AASEE,YAAQG,QAAR,CAAiB,OAAjB,EAA0B,EAAEC,iBAAiBL,kBAAnB,EAA1B;AACAM,MAAEC,IAAF,CAAOP,mBAAmBQ,YAAnB,EAAP;AACAF,MAAEC,IAAF,CAAOR,gBAAgBS,YAAhB,EAAP;AACAF,MAAEC,IAAF,CAAO,CAACX,eAAeY,YAAf,EAAR;AACH,CAdD","file":"MenuBadge.test.js","sourcesContent":["import React from 'react';\r\n\r\nimport test from 'ava';\r\nimport { shallow } from 'enzyme';\r\n\r\nimport zhnSpy from '../../../../js/components/zhn-atoms/__tests__/zhnSpy';\r\nimport MenuBadge from '../../../../js/components/zhn-atoms/MenuBadge';\r\n\r\nconst _fnGetWrapper = (props) => {\r\n  return shallow(<MenuBadge {...props} />);\r\n}\r\n\r\n/*\r\ntest('render root span with class `menu__badge`', t => {\r\n   const wrapper = _fnGetWrapper()\r\n\r\n   t.true(wrapper.is('span'))\r\n   t.true(wrapper.hasClass('menu__badge'))\r\n})\r\n*/\r\n\r\n/*\r\ntest('should use prop counter', t => {\r\n    const counter = 10\r\n        , wrapper = _fnGetWrapper({ counter})\r\n\r\n    t.is(parseInt(wrapper.text(), 10), counter);\r\n})\r\n*/\r\n\r\n\r\n\r\ntest('should call stopPropagation and onBadgeOpen on root click if isOpen falsy', t => {\r\n   const //onBadgeOpenSpy = sinon.spy()\r\n      //,  onBadgeCloseSpy = sinon.spy()\r\n         onBadgeOpenSpy = zhnSpy.createValueSpy()\r\n       , onBadgeCloseSpy = zhnSpy.createValueSpy()\r\n       , stopPropagationSpy = zhnSpy.createValueSpy()\r\n       , wrapper = _fnGetWrapper({\r\n           onBadgeOpen: onBadgeOpenSpy,\r\n           onBadgeClose: onBadgeCloseSpy\r\n         })\r\n\r\n     wrapper.simulate('click', { stopPropagation: stopPropagationSpy });\r\n     t.true(stopPropagationSpy.isCalledOnce())\r\n     t.true(onBadgeOpenSpy.isCalledOnce());\r\n     t.true(!onBadgeCloseSpy.isCalledOnce());\r\n})\r\n\r\ntest('should call stopPropagation and onBadgeClose on root click if isOpen true', t => {\r\n  const onBadgeOpenSpy = zhnSpy.createValueSpy()\r\n      , onBadgeCloseSpy = zhnSpy.createValueSpy()\r\n      , stopPropagationSpy = zhnSpy.createValueSpy()\r\n      , wrapper = _fnGetWrapper({\r\n          isOpen : true,\r\n          onBadgeOpen: onBadgeOpenSpy,\r\n          onBadgeClose: onBadgeCloseSpy\r\n        })\r\n\r\n    wrapper.simulate('click', { stopPropagation: stopPropagationSpy });\r\n    t.true(stopPropagationSpy.isCalledOnce())\r\n    t.true(onBadgeCloseSpy.isCalledOnce());\r\n    t.true(!onBadgeOpenSpy.isCalledOnce());\r\n})\r\n"]}