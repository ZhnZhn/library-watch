{"version":3,"sources":["../../../../src/components/zhn-atoms/__tests__/FormattedInteger.test.js"],"names":["_fnGetWrapper","props","wrapper","value","t","true","is","style","color","text"],"mappings":";;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,UAAO,qBAAQ,8BAAC,0BAAD,EAAsBA,KAAtB,CAAR,CAAP;AACD,CAFD;;AAIA,mBAAK,kBAAL,EAAyB,aAAK;AAC3B,OAAMC,UAAUF,cAAc,EAAEG,OAAO,GAAT,EAAd,CAAhB;;AAEAC,KAAEC,IAAF,CAAOH,QAAQI,EAAR,CAAW,MAAX,CAAP;AACF,CAJD;;AAMA,mBAAM,0CAAN,EAAkD,aAAK;AACnD,OAAMC,QAAQ,EAAEC,OAAO,OAAT,EAAd;AAAA,OACMN,UAAUF,cAAc,EAAEG,OAAO,GAAT,EAAcI,YAAd,EAAd,CADhB;;AAGAH,KAAEE,EAAF,CAAKJ,QAAQD,KAAR,GAAgBM,KAAhB,CAAsBC,KAA3B,EAAkCD,MAAMC,KAAxC;AACH,CALD;;AAOA,mBAAK,qDAAL,EAA4D,aAAK;AAC9DJ,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,IAAV,EAAd,EAAgCM,IAAhC,EAAL,EAA6C,OAA7C;AACAL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,KAAV,EAAd,EAAiCM,IAAjC,EAAL,EAA8C,QAA9C;AACAL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,MAAV,EAAd,EAAkCM,IAAlC,EAAL,EAA+C,SAA/C;AACAL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,OAAV,EAAd,EAAmCM,IAAnC,EAAL,EAAgD,WAAhD;AACF,CALD;;AAOA,mBAAK,wEAAL,EAA+E,aAAK;AAClFL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,CAAV,EAAd,EAA6BM,IAA7B,EAAL,EAA0C,GAA1C;AACAL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,CAAV,EAAd,EAA6BM,IAA7B,EAAL,EAA0C,GAA1C;AACAL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,EAAV,EAAd,EAA8BM,IAA9B,EAAL,EAA2C,IAA3C;AACAL,KAAEE,EAAF,CAAKN,cAAc,EAAEG,OAAQ,GAAV,EAAd,EAA+BM,IAA/B,EAAL,EAA4C,KAA5C;AACD,CALD","file":"FormattedInteger.test.js","sourcesContent":["\r\nimport React from 'react'\r\nimport test from 'ava';\r\nimport { shallow } from 'enzyme';\r\n\r\nimport FormattedInteger from '../../../../js/components/zhn-atoms/FormattedInteger';\r\n\r\nconst _fnGetWrapper = (props) => {\r\n  return shallow(<FormattedInteger {...props} />)\r\n}\r\n\r\ntest('render root span', t => {\r\n   const wrapper = _fnGetWrapper({ value: 100 })\r\n\r\n   t.true(wrapper.is('span'))\r\n})\r\n\r\ntest ('should use prop style for custom styling', t => {\r\n    const style = { color: 'green'}\r\n        , wrapper = _fnGetWrapper({ value: 100, style })\r\n\r\n    t.is(wrapper.props().style.color, style.color);\r\n})\r\n\r\ntest('should insert comma to separate groups of thousands', t => {\r\n   t.is(_fnGetWrapper({ value : 1000 }).text(), '1,000')\r\n   t.is(_fnGetWrapper({ value : 10000 }).text(), '10,000')\r\n   t.is(_fnGetWrapper({ value : 100000 }).text(), '100,000')\r\n   t.is(_fnGetWrapper({ value : 1000000 }).text(), '1,000,000')\r\n})\r\n\r\ntest('should return unmodified integer if provided integer is less than 1000', t => {\r\n  t.is(_fnGetWrapper({ value : 0 }).text(), '0')\r\n  t.is(_fnGetWrapper({ value : 1 }).text(), '1')\r\n  t.is(_fnGetWrapper({ value : 10 }).text(), '10')\r\n  t.is(_fnGetWrapper({ value : 100 }).text(), '100')\r\n})\r\n"]}