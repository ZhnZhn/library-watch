{"version":3,"sources":["../../../../src/components/zhn-atoms/__tests__/ButtonCircle.test.js"],"names":["_fnGetWrapper","props","wrapper","t","true","is","hasClass","className","caption","text","style","color","onClickStub","sinon","spy","onClick","simulate","calledOnce"],"mappings":";;AACA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,UAAO,qBAAQ,8BAAC,sBAAD,EAAkBA,KAAlB,CAAR,CAAP;AACD,CAFD;;AAIA,mBAAK,8CAAL,EAAqD,aAAK;AACvD,OAAMC,UAAUF,eAAhB;;AAEAG,KAAEC,IAAF,CAAOF,QAAQG,EAAR,CAAW,QAAX,CAAP;AACAF,KAAEC,IAAF,CAAOF,QAAQI,QAAR,CAAiB,cAAjB,CAAP;AACF,CALD;;AAQA,mBAAK,gDAAL,EAAuD,aAAK;AACzD,OAAMC,YAAU,IAAhB;AAAA,OACML,UAAUF,cAAc,EAAEO,oBAAF,EAAd,CADhB;;AAGAJ,KAAEC,IAAF,CAAOF,QAAQI,QAAR,CAAoBC,SAApB,mBAAP;AACF,CALD;;AAOA,mBAAK,yCAAL,EAAgD,aAAK;AAClD,OAAMC,UAAU,SAAhB;AAAA,OACON,UAAUF,cAAc,EAAEQ,gBAAF,EAAd,CADjB;;AAGAL,KAAEE,EAAF,CAAKH,QAAQO,IAAR,EAAL,EAAqBD,OAArB;AACF,CALD;;AAQA,mBAAK,6CAAL,EAAoD,aAAK;AACtD,OAAME,QAAQ,EAAEC,OAAO,OAAT,EAAd;AAAA,OACMT,UAAUF,cAAc,EAAEU,YAAF,EAAd,CADhB;;AAGAP,KAAEE,EAAF,CAAKH,QAAQD,KAAR,GAAgBS,KAAhB,CAAsBC,KAA3B,EAAkCD,MAAMC,KAAxC;AACF,CALD;;AAQA,mBAAK,iDAAL,EAAwD,aAAK;AAC3D,OAAMC,cAAcC,gBAAMC,GAAN,EAApB;AAAA,OACMZ,UAAUF,cAAc,EAAEe,SAASH,WAAX,EAAd,CADhB;;AAGAV,WAAQc,QAAR,CAAiB,OAAjB;AACAb,KAAEC,IAAF,CAAOQ,YAAYK,UAAnB;AACD,CAND","file":"ButtonCircle.test.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport test from 'ava';\r\nimport { shallow } from 'enzyme';\r\nimport sinon from 'sinon';\r\n\r\nimport ButtonCircle from '../../../../js/components/zhn-atoms/ButtonCircle';\r\n\r\nconst _fnGetWrapper = (props) => {\r\n  return shallow(<ButtonCircle {...props} />);\r\n}\r\n\r\ntest('render root button, with class .not-selected', t => {\r\n   const wrapper = _fnGetWrapper();\r\n\r\n   t.true(wrapper.is('button'));\r\n   t.true(wrapper.hasClass('not-selected'));\r\n});\r\n\r\n\r\ntest('should use prop className for add custom class', t => {\r\n   const className=\"bt\"\r\n      ,  wrapper = _fnGetWrapper({ className })\r\n\r\n   t.true(wrapper.hasClass(`${className} not-selected`));\r\n});\r\n\r\ntest('should use prop caption for custom text', t => {\r\n   const caption = 'caption'\r\n        , wrapper = _fnGetWrapper({ caption })\r\n\r\n   t.is(wrapper.text(), caption );\r\n});\r\n\r\n\r\ntest('should use prop style for custom style root', t => {\r\n   const style = { color: 'green' }\r\n       , wrapper = _fnGetWrapper({ style })\r\n\r\n   t.is(wrapper.props().style.color, style.color);\r\n});\r\n\r\n\r\ntest('should use prop onClick for click event on root', t => {\r\n  const onClickStub = sinon.spy()\r\n      , wrapper = _fnGetWrapper({ onClick: onClickStub })\r\n\r\n  wrapper.simulate('click');\r\n  t.true(onClickStub.calledOnce);\r\n});\r\n"]}