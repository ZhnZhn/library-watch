{"version":3,"sources":["../../../src/flux/stores/AppStore.js"],"names":["CONSOLE_LOG_STYLE","_fnLogLoadError","alertCaption","alertDescr","alertItemId","console","log","_isObj","obj","_isKeyTop","slice","key","_configs","configs","Array","isArray","_index","findIndex","unshift","splice","AppStore","Reflux","createStore","listenables","BrowserActions","ComponentActions","ChartActions","WatchActions","LoadingProgressActions","charts","init","initWatchList","createInitConfig","chartType","isShow","getConfigs","showAlertDialog","option","modalDialogType","MD","ALERT","repo","trigger","CAT","SHOW_MODAL_DIALOG","isKeyTop","onShowChart","browserType","chartCont","CHAT","SHOW_CHART","INIT_AND_SHOW_CHART","Factory","createChartContainer","BT","WATCH_LIST","setMenuItemOpen","BAT","UPDATE_BROWSER_MENU","onLoadStock","onLoadStockCompleted","json","process","env","NODE_ENV","limitRemaining","comp","createItem","LOAD_STOCK_COMPLETED","triggerLimitRemaining","addMenuItemCounter","onLoadStockFailed","onCloseChart","filter","compObj","index","CLOSE_CHART","minusMenuItemCounter","onCloseChartContainer","setMenuItemClose","onCloseChartContainer2","CLOSE_CHART_CONTAINER_2","BrowserSlice","ComponentSlice","WatchListSlice","WithLimitRemaining","WithLoadingProgress"],"mappings":"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","file":"AppStore.js","sourcesContent":["import Reflux from 'reflux';\r\n\r\nimport ComponentActions, { ComponentActionTypes as CAT } from '../actions/ComponentActions';\r\nimport ChartActions from '../actions/ChartActions';\r\nimport BrowserActions, { BrowserActionTypes as BAT } from '../actions/BrowserActions';\r\nimport { ChartActionTypes as CHAT } from '../actions/ChartActions';\r\nimport LoadingProgressActions from '../actions/LoadingProgressActions';\r\nimport WatchActions from '../actions/WatchActions';\r\n\r\nimport { BrowserType as BT, ModalDialog as MD } from '../../constants/Type';\r\n\r\nimport Factory from '../logic/Factory';\r\n\r\nimport BrowserSlice from './BrowserSlice';\r\nimport ComponentSlice from './ComponentSlice';\r\nimport WatchListSlice from '../watch-list/WatchListSlice';\r\nimport WithLimitRemaining from './WithLimitRemaining';\r\nimport WithLoadingProgress from './WithLoadingProgress';\r\n\r\nconst CONSOLE_LOG_STYLE = 'color:rgb(237, 88, 19);';\r\nconst _fnLogLoadError = function({\r\n  alertCaption, alertDescr, alertItemId\r\n}){\r\n  console.log('%c'+ alertCaption + ':' + alertItemId, CONSOLE_LOG_STYLE);\r\n  console.log('%c' + alertDescr, CONSOLE_LOG_STYLE);\r\n}\r\n\r\nconst _isObj = obj => typeof obj === 'object'\r\n  && obj !== null;\r\n\r\nconst _isKeyTop = (slice, key) => {\r\n  if ( !_isObj(slice) ) {\r\n    return false;\r\n  }\r\n  const _configs = slice.configs;\r\n  if ( !Array.isArray(_configs) ) {\r\n    return false;\r\n  }\r\n  const _index = _configs.findIndex(obj => obj.key === key)\r\n  if (_index !== -1) {\r\n    _configs.unshift(_configs[_index])\r\n    _configs.splice(_index+1, 1)\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n  //console.log(slice)\r\n  //return Boolean(_configs.find(obj => obj.key === key));\r\n};\r\n\r\nconst AppStore = Reflux.createStore({\r\n  listenables : [\r\n    BrowserActions, ComponentActions, ChartActions, WatchActions,\r\n    LoadingProgressActions\r\n  ],\r\n  charts : {},\r\n\r\n  init(){\r\n    this.initWatchList();\r\n  },\r\n\r\n  createInitConfig(chartType){\r\n    return {\r\n      chartType: chartType,\r\n      configs: [],\r\n      isShow: true\r\n    };\r\n  },\r\n  getConfigs(chartType){\r\n   return this.charts[chartType];\r\n  },\r\n  showAlertDialog(option={}){\r\n   option.modalDialogType = MD.ALERT;\r\n   option.alertItemId = (option.alertItemId)\r\n             ? option.alertItemId\r\n             : option.repo;\r\n   this.trigger(CAT.SHOW_MODAL_DIALOG, option);\r\n },\r\n\r\n  isKeyTop(key, option){\r\n    const { chartType } = option\r\n    , slice = this.charts[chartType];\r\n    return _isKeyTop(slice, key);\r\n  },\r\n\r\n  onShowChart(chartType, browserType){\r\n   const chartCont = this.charts[chartType];\r\n   if (chartCont){\r\n     chartCont.isShow = true;\r\n     this.trigger(CHAT.SHOW_CHART, chartCont);\r\n   } else {\r\n     this.charts[chartType] = this.createInitConfig(chartType);\r\n     this.trigger(CHAT.INIT_AND_SHOW_CHART,\r\n        Factory.createChartContainer(chartType, browserType)\r\n     );\r\n   }\r\n\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.setMenuItemOpen(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n\r\n },\r\n\r\n onLoadStock(){\r\n },\r\n onLoadStockCompleted(option, json){\r\n   /* eslint-disable no-undef */\r\n   if (process.env.NODE_ENV !== 'production'){\r\n   /* eslint-disable no-undef */\r\n     console.log(option);\r\n     console.log(json);     \r\n   }\r\n\r\n   const { chartType, browserType, limitRemaining } = option\r\n       , comp = Factory.createItem(option, json, { chartType, browserType});\r\n\r\n\r\n   const chartCont = this.charts[chartType];\r\n   if (chartCont){\r\n     chartCont.configs.unshift(comp);\r\n     chartCont.isShow = true;\r\n     this.trigger(CHAT.LOAD_STOCK_COMPLETED, chartCont);\r\n   } else {\r\n     this.charts[chartType] = this.createInitConfig(chartType);\r\n     this.charts[chartType].configs.unshift(comp);\r\n     this.trigger(\r\n        CHAT.INIT_AND_SHOW_CHART,\r\n        Factory.createChartContainer(chartType, browserType)\r\n     );\r\n   }\r\n\r\n   this.triggerLimitRemaining(limitRemaining);\r\n\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.addMenuItemCounter(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n  },\r\n  onLoadStockFailed(option){\r\n   const  { limitRemaining } = option;\r\n\r\n   this.triggerLimitRemaining(limitRemaining);\r\n\r\n   this.showAlertDialog(option);\r\n\r\n   _fnLogLoadError(option);\r\n },\r\n\r\n  onCloseChart(chartType, browserType, key){\r\n   const chartCont = this.charts[chartType];\r\n   chartCont.configs = chartCont.configs.filter((compObj, index) => {\r\n      return compObj.key !== key;\r\n   })\r\n   this.trigger(CHAT.CLOSE_CHART, chartCont);\r\n\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.minusMenuItemCounter(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n\r\n },\r\n\r\n onCloseChartContainer(chartType, browserType){\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.setMenuItemClose(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n },\r\n onCloseChartContainer2(chartType, browserType){\r\n   this.trigger(CAT.CLOSE_CHART_CONTAINER_2, chartType);\r\n },\r\n\r\n ...BrowserSlice,\r\n ...ComponentSlice,\r\n ...WatchListSlice,\r\n ...WithLimitRemaining,\r\n ...WithLoadingProgress\r\n});\r\n\r\nexport default AppStore\r\n"]}