{"version":3,"sources":["../../../src/flux/stores/AppStore.js"],"names":["toTopByKey","ChartLogic","removeAll","CONSOLE_LOG_STYLE","_logLoadError","alertCaption","alertDescr","alertItemId","console","log","AppStore","Reflux","createStore","listenables","BrowserActions","ComponentActions","ChartActions","WatchActions","LoadingProgressActions","charts","init","initWatchList","createInitConfig","chartType","configs","isShow","getConfigs","showAlertDialog","option","modalDialogType","MD","ALERT","repo","trigger","CAT","SHOW_MODAL_DIALOG","isKeyTop","key","slice","onMoveToTop","CHAT","SHOW_CHART","onShowChart","browserType","chartCont","INIT_AND_SHOW_CHART","Factory","createChartContainer","BT","WATCH_LIST","setMenuItemOpen","BAT","UPDATE_BROWSER_MENU","onLoadStock","onLoadStockCompleted","json","process","env","NODE_ENV","limitRemaining","comp","createItem","unshift","LOAD_STOCK_COMPLETED","triggerLimitRemaining","addMenuItemCounter","onLoadStockFailed","onCloseChart","filter","compObj","index","CLOSE_CHART","minusMenuItemCounter","onCloseChartContainer","setMenuItemClose","onCloseChartContainer2","CLOSE_CHART_CONTAINER_2","onRemoveAll","chartSlice","resetMenuItemCounter","BrowserSlice","ComponentSlice","WatchListSlice","WithLimitRemaining","WithLoadingProgress"],"mappings":"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","file":"AppStore.js","sourcesContent":["import Reflux from 'reflux';\r\n\r\nimport ComponentActions, { ComponentActionTypes as CAT } from '../actions/ComponentActions';\r\nimport ChartActions from '../actions/ChartActions';\r\nimport BrowserActions, { BrowserActionTypes as BAT } from '../actions/BrowserActions';\r\nimport { ChartActionTypes as CHAT } from '../actions/ChartActions';\r\nimport LoadingProgressActions from '../actions/LoadingProgressActions';\r\nimport WatchActions from '../actions/WatchActions';\r\n\r\nimport { BrowserType as BT, ModalDialog as MD } from '../../constants/Type';\r\n\r\nimport Factory from '../logic/Factory';\r\n\r\nimport ChartLogic from './chart/ChartLogic';\r\nimport BrowserSlice from './BrowserSlice';\r\nimport ComponentSlice from './ComponentSlice';\r\nimport WatchListSlice from '../watch-list/WatchListSlice';\r\nimport WithLimitRemaining from './WithLimitRemaining';\r\nimport WithLoadingProgress from './WithLoadingProgress';\r\n\r\nconst {\r\n  toTopByKey,\r\n  removeAll\r\n} = ChartLogic;\r\n\r\nconst CONSOLE_LOG_STYLE = 'color:rgb(237, 88, 19);';\r\nconst _logLoadError = function({\r\n  alertCaption, alertDescr, alertItemId\r\n}){\r\n  console.log('%c'+ alertCaption + ':' + alertItemId, CONSOLE_LOG_STYLE);\r\n  console.log('%c' + alertDescr, CONSOLE_LOG_STYLE);\r\n}\r\n\r\nconst AppStore = Reflux.createStore({\r\n  listenables: [\r\n    BrowserActions, ComponentActions,\r\n    ChartActions, WatchActions,\r\n    LoadingProgressActions\r\n  ],\r\n  charts: {},\r\n\r\n  init(){\r\n    this.initWatchList();\r\n  },\r\n\r\n  createInitConfig(chartType){\r\n    return {\r\n      chartType: chartType,\r\n      configs: [],\r\n      isShow: true\r\n    };\r\n  },\r\n  getConfigs(chartType){\r\n   return this.charts[chartType];\r\n  },\r\n  showAlertDialog(option={}){\r\n   option.modalDialogType = MD.ALERT;\r\n   option.alertItemId = option.alertItemId\r\n     || option.repo || '';\r\n   this.trigger(CAT.SHOW_MODAL_DIALOG, option);\r\n },\r\n\r\n  isKeyTop(key, option){\r\n    const { chartType } = option\r\n    , slice = this.charts[chartType];\r\n    return toTopByKey(slice, key);\r\n  },\r\n  onMoveToTop(chartType, key){\r\n    const slice = this.charts[chartType];    \r\n    if (toTopByKey(slice, key)) {\r\n      this.trigger(CHAT.SHOW_CHART, slice);\r\n    }\r\n  },\r\n\r\n  onShowChart(chartType, browserType){\r\n   const chartCont = this.charts[chartType];\r\n   if (chartCont){\r\n     chartCont.isShow = true;\r\n     this.trigger(CHAT.SHOW_CHART, chartCont);\r\n   } else {\r\n     this.charts[chartType] = this.createInitConfig(chartType);\r\n     this.trigger(CHAT.INIT_AND_SHOW_CHART,\r\n        Factory.createChartContainer(chartType, browserType)\r\n     );\r\n   }\r\n\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.setMenuItemOpen(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n\r\n },\r\n\r\n onLoadStock(){\r\n },\r\n onLoadStockCompleted(option, json){\r\n   /* eslint-disable no-undef */\r\n   if (process.env.NODE_ENV !== 'production'){\r\n   /* eslint-disable no-undef */\r\n     console.log(option);\r\n     console.log(json);\r\n   }\r\n\r\n   const { chartType, browserType, limitRemaining } = option\r\n       , comp = Factory.createItem(option, json, { chartType, browserType});\r\n\r\n\r\n   const chartCont = this.charts[chartType];\r\n   if (chartCont){\r\n     chartCont.configs.unshift(comp);\r\n     chartCont.isShow = true;\r\n     this.trigger(CHAT.LOAD_STOCK_COMPLETED, chartCont);\r\n   } else {\r\n     this.charts[chartType] = this.createInitConfig(chartType);\r\n     this.charts[chartType].configs.unshift(comp);\r\n     this.trigger(\r\n        CHAT.INIT_AND_SHOW_CHART,\r\n        Factory.createChartContainer(chartType, browserType)\r\n     );\r\n   }\r\n\r\n   this.triggerLimitRemaining(limitRemaining);\r\n\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.addMenuItemCounter(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n  },\r\n  onLoadStockFailed(option){\r\n   const  { limitRemaining } = option;\r\n   this.triggerLimitRemaining(limitRemaining);\r\n   this.showAlertDialog(option);\r\n   _logLoadError(option);\r\n },\r\n\r\n  onCloseChart(chartType, browserType, key){\r\n   const chartCont = this.charts[chartType];\r\n   chartCont.configs = chartCont.configs.filter((compObj, index) => {\r\n      return compObj.key !== key;\r\n   })\r\n   this.trigger(CHAT.CLOSE_CHART, chartCont);\r\n\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.minusMenuItemCounter(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n\r\n },\r\n\r\n onCloseChartContainer(chartType, browserType){\r\n   if (browserType !== BT.WATCH_LIST){\r\n     this.setMenuItemClose(chartType, browserType);\r\n     this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n   }\r\n },\r\n onCloseChartContainer2(chartType, browserType){\r\n   this.trigger(CAT.CLOSE_CHART_CONTAINER_2, chartType);\r\n },\r\n\r\n onRemoveAll(chartType, browserType){\r\n    const chartSlice = removeAll(this.charts, chartType);\r\n    this.resetMenuItemCounter(chartType, browserType)\r\n    this.trigger(CHAT.SHOW_CHART, chartSlice);\r\n    this.trigger(BAT.UPDATE_BROWSER_MENU, browserType);\r\n  },\r\n\r\n ...BrowserSlice,\r\n ...ComponentSlice,\r\n ...WatchListSlice,\r\n ...WithLimitRemaining,\r\n ...WithLoadingProgress\r\n});\r\n\r\nexport default AppStore\r\n"]}