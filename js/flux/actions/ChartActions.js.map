{"version":3,"sources":["../../../src/flux/actions/ChartActions.js"],"names":["ALREADY_LOADED","caption","descr","ChartActionTypes","INIT_AND_SHOW_CHART","LOAD_STOCK","LOAD_STOCK_COMPLETED","LOAD_STOCK_FAILED","SHOW_CHART","CLOSE_CHART","ChartActions","Reflux","createActions","children","isLoading","idLoading","undefined","isShouldEmit","listen","chartType","browserType","option","loadId","RouterLoad","crKey","loadItem","key","Store","isKeyTop","completed","failed","ComponentActions","showAlert","showChart"],"mappings":";;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB;AACrBC,WAAS,gBADY;AAErBC,SAAO;AAFc,CAAvB;;AAKO,IAAMC,8CAAmB;AAC9BC,uBAAsB,kBADQ;;AAG9BC,cAAa,WAHiB;AAI9BC,wBAAuB,oBAJO;AAK9BC,qBAAoB,iBALU;;AAO9BC,cAAa,WAPiB;AAQ9BC,eAAc;AARgB,CAAzB;;AAWP,IAAMC,eAAgBC,iBAAOC,aAAP,mFACfT,iBAAiBE,UADF,EACgB;AAC7BQ,YAAW,CAAC,WAAD,EAAc,QAAd,CADkB;AAE7BC,aAAY,KAFiB;AAG7BC,aAAYC,SAHiB;AAI7BC,gBAAe;AACf;AAL6B,CADhB,wDAQfd,iBAAiBK,UARF,EAQgB,EARhB,wDASfL,iBAAiBM,WATF,EASiB,EATjB,0BAAtB;;AAYAC,aAAaP,iBAAiBE,UAA9B,EAA0Ca,MAA1C,CAAiD,UAASC,SAAT,EAAoBC,WAApB,EAAiCC,MAAjC,EAAwC;AAAA,uBAC/DA,MAD+D,CAC/EC,MAD+E;AAAA,MAC/EA,MAD+E,kCACxE,IADwE;;AAEvFD,SAAOF,SAAP,GAAmBA,SAAnB;AACAE,SAAOD,WAAP,GAAqBA,WAArB;;AAHuF,2BAK3DG,qBAAWD,MAAX,CAL2D;AAAA,MAK/EE,KAL+E,sBAK/EA,KAL+E;AAAA,MAKxEC,QALwE,sBAKxEA,QALwE;;AAMvF,MAAMC,MAAMF,MAAMH,MAAN,CAAZ;AACA,MAAK,CAAEM,mBAAMC,QAAN,CAAeF,GAAf,EAAoBL,MAApB,CAAP,EAAsC;AACpCA,WAAOK,GAAP,GAAaA,GAAb;AACA,SAAKZ,SAAL,GAAiB,IAAjB;AACA,SAAKC,SAAL,GAAiBW,GAAjB;AACAD,aAASJ,MAAT,EAAiB,KAAKQ,SAAtB,EAAiC,KAAKC,MAAtC;AACD,GALD,MAKO;AACLC,+BAAiBC,SAAjB,CAA2BhC,cAA3B;AACAU,iBAAauB,SAAb,CAAuBd,SAAvB,EAAkCC,WAAlC;AACD;AACF,CAhBD;;kBAmBeV,Y","file":"ChartActions.js","sourcesContent":["import Reflux from 'reflux';\r\n\r\nimport RouterLoad from '../logic/RouterLoad';\r\nimport Store from '../stores/AppStore'\r\nimport ComponentActions from './ComponentActions'\r\n\r\nconst ALREADY_LOADED = {\r\n  caption: 'Already loaded',\r\n  descr: 'This item already has been loaded\\nto container, moved to top.'\r\n};\r\n\r\nexport const ChartActionTypes = {\r\n  INIT_AND_SHOW_CHART : 'initAndShowChart',\r\n\r\n  LOAD_STOCK : 'loadStock',\r\n  LOAD_STOCK_COMPLETED : 'loadStockCompleted',\r\n  LOAD_STOCK_FAILED : 'loadStockFailed',\r\n\r\n  SHOW_CHART : 'showChart',\r\n  CLOSE_CHART : 'closeChart'\r\n};\r\n\r\nconst ChartActions =  Reflux.createActions({\r\n      [ChartActionTypes.LOAD_STOCK] : {\r\n         children : ['completed', 'failed'],\r\n         isLoading : false,\r\n         idLoading : undefined,\r\n         isShouldEmit : true\r\n         //cancelLoad : _fnCancelLoad\r\n       },\r\n      [ChartActionTypes.SHOW_CHART] : {},\r\n      [ChartActionTypes.CLOSE_CHART] : {}\r\n});\r\n\r\nChartActions[ChartActionTypes.LOAD_STOCK].listen(function(chartType, browserType, option){\r\n  const { loadId='LW' } = option;\r\n  option.chartType = chartType;\r\n  option.browserType = browserType;\r\n\r\n  const { crKey, loadItem } = RouterLoad[loadId];\r\n  const key = crKey(option);  \r\n  if ( !(Store.isKeyTop(key, option)) ) {\r\n    option.key = key\r\n    this.isLoading = true;\r\n    this.idLoading = key;\r\n    loadItem(option, this.completed, this.failed);\r\n  } else {\r\n    ComponentActions.showAlert(ALREADY_LOADED)\r\n    ChartActions.showChart(chartType, browserType)\r\n  }\r\n})\r\n\r\n\r\nexport default ChartActions\r\n"]}