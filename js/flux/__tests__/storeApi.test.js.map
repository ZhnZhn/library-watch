{"version":3,"file":"storeApi.test.js","names":["_storeApi","require","describe","fn","fCrStoreSlice","test","SLICE_TEST","crTestSlice","selectTestSlice","msTest1","expect","toEqual","msTest2","msTest3","a","b","PN","fCrMsFromPropNames","pn1","pn2","crMsOptions","v1","v2","fCrMsFromFn","is"],"sources":["../../../src/flux/__tests__/storeApi.test.js"],"sourcesContent":["import {\r\n  fCrStoreSlice,\r\n  fCrMsFromPropNames,\r\n  fCrMsFromFn\r\n} from '../storeApi';\r\n\r\ndescribe(\"fCrStoreSlice\", () => {\r\n  const fn = fCrStoreSlice;\r\n  test(\"should return array with crMs and selector functions\", () => {\r\n    const SLICE_TEST = \"test\"\r\n    , [\r\n      crTestSlice,\r\n      selectTestSlice\r\n    ] = fn(SLICE_TEST);\r\n\r\n    const msTest1 = void 0;\r\n    expect(selectTestSlice({...crTestSlice(msTest1)}))\r\n     .toEqual(msTest1)\r\n    const msTest2 = \"a\";\r\n    expect(selectTestSlice({...crTestSlice(msTest2)}))\r\n       .toEqual(msTest2)\r\n    const msTest3 = {a: \"a\", b: \"b\"};\r\n    expect(selectTestSlice({...crTestSlice(msTest3)}))\r\n      .toEqual(msTest3)\r\n  })\r\n\r\n\r\n  test(\"should use propName parameter\", () => {\r\n    const SLICE_TEST = \"test\"\r\n    , PN = \"id\"\r\n    , [\r\n      crTestSlice,\r\n      selectTestSlice\r\n    ] = fn(SLICE_TEST, PN);\r\n\r\n    const msTest1 = void 0\r\n    expect(selectTestSlice({...crTestSlice(msTest1)}))\r\n      .toEqual({ [PN]: msTest1})\r\n    const msTest2 = \"someId\";\r\n    expect(selectTestSlice({...crTestSlice(msTest2)}))\r\n      .toEqual({ [PN]: msTest2})\r\n    const msTest3 = {a: \"a\", \"b\": \"b\"}\r\n    expect(selectTestSlice({...crTestSlice(msTest3)}))\r\n      .toEqual({ [PN]: msTest3})\r\n  })\r\n})\r\n\r\ndescribe(\"fCrMsFromPropNames\", () => {\r\n  const fn = fCrMsFromPropNames;\r\n  test(\"should return function that create store slice from parameters\", () => {\r\n    const SLICE_TEST = \"test\"\r\n    , [\r\n      crTestSlice,\r\n      selectTestSlice\r\n    ] = fCrStoreSlice(SLICE_TEST)\r\n    , pn1 = \"pn1\"\r\n    , pn2 = \"pn2\"\r\n    , crMsOptions = fn(crTestSlice, pn1, pn2)\r\n    , v1 = \"v1\"\r\n    , v2 = \"v2\";\r\n\r\n    expect(selectTestSlice(crMsOptions(v1, v2)))\r\n      .toEqual({\r\n        [pn1]: v1,\r\n        [pn2]: v2\r\n      })\r\n  })\r\n})\r\n\r\ndescribe(\"fCrMsFromFn\", () => {\r\n  const fn = fCrMsFromFn\r\n  test(\"should return function that create slice from fn parameter\", () => {\r\n    const SLICE_TEST = \"test\"\r\n    , [\r\n      crTestSlice,\r\n      selectTestSlice\r\n    ] = fCrStoreSlice(SLICE_TEST)\r\n    , pn1 = \"pn1\"\r\n    , pn2 = \"pn2\"\r\n    , crMsOptions = fn(crTestSlice, (v1, v2) => ({\r\n        [pn1]: v1,\r\n        [pn2]: v2,\r\n        is: true\r\n    }))\r\n    , v1 = \"v1\"\r\n    , v2 = \"v2\";\r\n\r\n    expect(selectTestSlice(crMsOptions(v1, v2)))\r\n      .toEqual({\r\n         [pn1]: v1,\r\n         [pn2]: v2,\r\n         is: true\r\n      })\r\n  })\r\n})\r\n"],"mappings":"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","ignoreList":[]}