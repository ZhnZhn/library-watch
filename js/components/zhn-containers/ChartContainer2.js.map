{"version":3,"sources":["../../../src/components/zhn-containers/ChartContainer2.jsx"],"names":["CL","CHILD_MARGIN","S","ROOT","position","backgroundColor","padding","width","height","minHeight","marginLeft","borderRadius","boxShadow","overflowY","overflowX","BLOCK","display","NONE","SCROLL","paddingRight","isInArray","arr","value","len","length","i","compActions","CHAT","SHOW_CHART","LOAD_STOCK_COMPLETED","CLOSE_CHART","ChartContainer2","childMargin","state","_onStore","actionType","data","chartType","props","_scrollComp","scrollTop","setState","CAT","CLOSE_CHART_CONTAINER_2","_handleHide","browserType","onCloseContainer","isShow","_refScroll","c","unsubscribe","Store","listen","getConfigs","caption","configs","_styleOpen","_classOpen","undefined","Component"],"mappings":"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","file":"ChartContainer2.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport Store from '../../flux/stores/AppStore';\r\nimport { ChartActionTypes as CHAT } from '../../flux/actions/ChartActions';\r\nimport { ComponentActionTypes as CAT } from '../../flux/actions/ComponentActions';\r\n\r\nimport CaptionRow from '../zhn-atoms/CaptionRow';\r\nimport SvgHrzResize from '../zhn-moleculs/SvgHrzResize';\r\n\r\nimport ScrollPane from '../zhn-atoms/ScrollPane';\r\n\r\nconst CL = \"show-popup\";\r\nconst CHILD_MARGIN = 36;\r\n\r\nconst S = {\r\n  ROOT: {\r\n    position: 'relative',\r\n    backgroundColor: '#4D4D4D',\r\n    padding: '0px 0px 3px 0px',\r\n    width: '635px',\r\n    height: 'calc(100vh - 71px)',\r\n    minHeight: '500px',\r\n    marginLeft: '16px',\r\n    borderRadius: '4px',\r\n    boxShadow: '1px 4px 6px 1px rgba(0, 0, 0, 0.6)',\r\n    overflowY: 'hidden',\r\n    overflowX : 'hidden'\r\n  },\r\n  BLOCK: {\r\n    display: 'inline-block'\r\n  },\r\n  NONE: {\r\n    display: 'none'\r\n  },\r\n  SCROLL: {\r\n    overflowY: 'auto',\r\n    height: '92%',\r\n    paddingRight: '10px'\r\n  }\r\n};\r\n\r\nconst isInArray = function(arr=[], value){\r\n  const len = arr.length;\r\n  let i=0;\r\n  for (; i<len; i++){\r\n    if (arr[i] === value){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst compActions = [\r\n  CHAT.SHOW_CHART,\r\n  CHAT.LOAD_STOCK_COMPLETED,\r\n  CHAT.CLOSE_CHART\r\n];\r\n\r\nclass ChartContainer2 extends Component {\r\n  /*\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    browserType: PropTypes.string,\r\n    chartType: PropTypes.string,\r\n    onCloseContainer: PropTypes.func\r\n  }\r\n  */\r\n   childMargin = CHILD_MARGIN\r\n   state = {}\r\n\r\n   componentWillMount(){\r\n     this.unsubscribe = Store.listen(this._onStore);\r\n     this.setState(Store.getConfigs(this.props.chartType));\r\n   }\r\n   componentWillUnmount(){\r\n     this.unsubscribe();\r\n   }\r\n\r\n   _onStore = (actionType, data) => {\r\n      if (isInArray(compActions, actionType)) {\r\n        if (data && data.chartType === this.props.chartType){\r\n          if (this._scrollComp) {\r\n            this._scrollComp.scrollTop()\r\n          }\r\n          this.setState(data);\r\n        }\r\n      } else if (actionType === CAT.CLOSE_CHART_CONTAINER_2){\r\n         if (data === this.props.chartType){\r\n           this._handleHide();\r\n         }\r\n      }\r\n   }\r\n\r\n   _handleHide = () => {\r\n      const { chartType, browserType, onCloseContainer } = this.props;\r\n      onCloseContainer(chartType, browserType);\r\n      this.setState({ isShow: false });\r\n   }\r\n\r\n   _refScroll = c => this._scrollComp = c\r\n\r\n   render(){\r\n    const  { caption } = this.props\r\n         , { isShow, configs } = this.state\r\n         , _styleOpen = isShow ? S.BLOCK : S.NONE\r\n         , _classOpen = isShow ? CL : undefined;\r\n     return(\r\n        <div\r\n           className={_classOpen}\r\n           style={{ ...S.ROOT, ..._styleOpen }}\r\n        >\r\n          <CaptionRow\r\n             caption={caption}\r\n             onClose={this._handleHide}\r\n          >\r\n            <SvgHrzResize\r\n              minWidth={500}\r\n              maxWidth={1200}\r\n              comp={this}\r\n            />\r\n          </CaptionRow>\r\n\r\n          <ScrollPane\r\n            ref={this._refScroll}\r\n            style={S.SCROLL}\r\n          >\r\n            {configs}\r\n          </ScrollPane>\r\n\r\n        </div>\r\n     )\r\n   }\r\n}\r\n\r\nexport default ChartContainer2\r\n"]}