{"version":3,"sources":["../../../src/components/dialogs/ValidationMessagesFragment.jsx"],"names":["STYLE","ROOT_DIV","paddingLeft","paddingTop","color","NUMBER_DIV","display","width","height","border","borderRadius","textAlign","marginRight","MSG_SPAN","whiteSpace","fontWeight","ValidationMessage","index","msg","ValidationMessagesFragment","props","validationMessages","Array","isArray","_renderValidationMessages","msgs","map"],"mappings":";;;;;;AAAA;;;;;;AAEA;;AAEA,IAAMA,QAAQ;AACZC,YAAW;AACTC,iBAAa,MADJ;AAETC,gBAAY,KAFH;AAGTC,WAAO;AAHE,GADC;;AAOZC,cAAa;AACXC,aAAS,cADE;AAEXC,WAAO,MAFI;AAGXC,YAAQ,MAHG;AAIXC,YAAQ,mBAJG;AAKXC,kBAAc,KALH;AAMXC,eAAW,QANA;AAOXC,iBAAa;AAPF,GAPD;;AAiBZC,YAAW;AACTC,gBAAa,KADJ;AAETC,gBAAa;AAFJ;AAjBC,CAAd;;AAuBA,IAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,GAAV,QAAUA,GAAV;AAAA,SACxB;AAAA;AAAA;AACE;AAAA;AAAA,QAAK,OAAOlB,MAAMK,UAAlB;AAA+BY,cAAM;AAArC,KADF;AAEE;AAAA;AAAA,QAAM,OAAOjB,MAAMa,QAAnB;AAA8BK;AAA9B;AAFF,GADwB;AAAA,CAA1B;AAMA;;;;;;;AAOA,IAAMC,6BAA6B,SAA7BA,0BAA6B,CAACC,KAAD,EAAW;AAAA,MACnCC,kBADmC,GACZD,KADY,CACnCC,kBADmC;;;AAG3C,MAAI,CAACC,MAAMC,OAAN,CAAcF,kBAAd,CAAL,EAAuC;AACrC,WAAO,IAAP;AACD;;AAEF,MAAMG,4BAA4B,SAA5BA,yBAA4B,CAACC,IAAD,EAAU;AAC1C,WAAOA,KAAKC,GAAL,CAAS,UAACR,GAAD,EAAMD,KAAN,EAAc;AAC5B,aACE,8BAAC,iBAAD,IAAmB,KAAKA,KAAxB,EAA+B,KAAKC,GAApC,EAAyC,OAAOD,KAAhD,GADF;AAGD,KAJM,CAAP;AAKD,GAND;;AAQA,SACI;AAAA;AAAA,MAAK,OAAOjB,MAAMC,QAAlB;AACGuB,8BAA0BH,kBAA1B;AADH,GADJ;AAKD,CApBD;;AAsBA;;;;;;;;;;kBAUeF,0B","file":"ValidationMessagesFragment.js","sourcesContent":["import React from 'react';\r\n\r\n//import PropTypes from \"prop-types\";\r\n\r\nconst STYLE = {\r\n  ROOT_DIV : {\r\n    paddingLeft: '10px',\r\n    paddingTop: '5px',\r\n    color: '#F44336'\r\n  },\r\n\r\n  NUMBER_DIV : {\r\n    display: 'inline-block',\r\n    width: '22px',\r\n    height: '22px',\r\n    border: 'solid 2px #F44336',\r\n    borderRadius: '50%',\r\n    textAlign: 'center',\r\n    marginRight: '5px'\r\n  },\r\n\r\n  MSG_SPAN : {\r\n    whiteSpace : 'pre',\r\n    fontWeight : 'bold'\r\n  }\r\n}\r\n\r\nconst ValidationMessage = ({ index, msg }) => (\r\n  <div>\r\n    <div style={STYLE.NUMBER_DIV}>{index+1}</div>\r\n    <span style={STYLE.MSG_SPAN}>{msg}</span>\r\n  </div>\r\n)\r\n/*\r\nValidationMessage.propTypes = {\r\n  index: PropTypes.number,\r\n  msg: PropTypes.string\r\n}\r\n*/\r\n\r\nconst ValidationMessagesFragment = (props) => {\r\n   const { validationMessages } = props;\r\n\r\n   if (!Array.isArray(validationMessages)){\r\n     return null;\r\n   }\r\n\r\n  const _renderValidationMessages = (msgs) => {\r\n    return msgs.map((msg, index)=>{\r\n      return (\r\n        <ValidationMessage key={index} msg={msg} index={index} />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n      <div style={STYLE.ROOT_DIV}>\r\n        {_renderValidationMessages(validationMessages)}\r\n      </div>\r\n  );\r\n};\r\n\r\n/*\r\nValidationMessagesFragment.propTypes = {\r\n  validationMessages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      msg: PropTypes.string\r\n    })\r\n  )\r\n}\r\n*/\r\n\r\nexport default ValidationMessagesFragment\r\n"]}