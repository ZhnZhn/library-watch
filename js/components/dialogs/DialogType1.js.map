{"version":3,"sources":["../../../src/components/dialogs/DialogType1.jsx"],"names":["crMenuMore","helperFns","crButtons","DialogType1","Decor","withToolbar","withValidationLoad","props","_handleClear","inputOne","setValue","setState","validationMessages","_handleLoad","_handleLoadWithValidation","_createValidationMessages","_createLoadOption","msg","value","getValue","concat","oneTitle","isValid","length","requestType","repo","_handleClose","_handleCloseWithValidation","_refInputOne","c","stock","toolbarButtons","_createType2WithToolbar","_menuMore","toggleLabels","_clickLabelWithToolbar","toggleToolBar","_toggleWithToolbar","_commandButtons","inst","state","isToolbar","isShowLabels","nextProps","nextState","isShow","caption","onShow","onePlaceholder","Component"],"mappings":"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","file":"DialogType1.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport Decor from './decorators/Decorators'\r\nimport helperFns from './helperFns/helperFns'\r\nimport D from './DialogCell'\r\n\r\nconst { crMenuMore, crButtons } = helperFns;\r\n\r\n@Decor.withToolbar\r\n@Decor.withValidationLoad\r\nclass DialogType1 extends Component {\r\n  /*\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    requestType: PropTypes.string,\r\n    oneTitle: PropTypes.string,\r\n    onePlaceholder: PropTypes.string,\r\n    isShow: PropTypes.bool,\r\n    onShow: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.stock = null\r\n    this.toolbarButtons = this._createType2WithToolbar(props)\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleLabels: this._clickLabelWithToolbar,\r\n      toggleToolBar: this._toggleWithToolbar,\r\n    })\r\n    this._commandButtons = crButtons({ inst: this })\r\n    this.state = {\r\n      isToolbar: true,\r\n      isShowLabels: true,\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n _handleClear = () => {\r\n   this.inputOne.setValue('');\r\n   this.setState({ validationMessages: [] });\r\n }\r\n\r\n _handleLoad = () => {\r\n    this._handleLoadWithValidation(\r\n      this._createValidationMessages(),\r\n      this._createLoadOption\r\n    )\r\n  }\r\n  _createValidationMessages = () => {\r\n    let msg = [];\r\n\r\n    const value = this.inputOne.getValue();\r\n    if (!value) {\r\n      msg = msg.concat(`${this.props.oneTitle} is required`)\r\n    }\r\n\r\n    msg.isValid = (msg.length === 0) ? true : false;\r\n    return msg;\r\n  }\r\n  _createLoadOption = () => {\r\n    const { requestType } = this.props;\r\n    return {\r\n      repo : this.inputOne.getValue(),\r\n      requestType\r\n    };\r\n  }\r\n\r\n  _handleClose = () => {\r\n     this._handleCloseWithValidation(\r\n        this._createValidationMessages\r\n     )\r\n   }\r\n\r\n  _refInputOne = c => this.inputOne = c\r\n\r\n  render(){\r\n    const {\r\n      caption, isShow, onShow,\r\n      oneTitle, onePlaceholder\r\n    } = this.props\r\n    , {\r\n      isToolbar,\r\n      isShowLabels,\r\n      validationMessages\r\n    } = this.state;\r\n\r\n    return (\r\n       <D.DraggableDialog\r\n           isShow={isShow}\r\n           caption={caption}\r\n           menuModel={this._menuMore}\r\n           commandButtons={this._commandButtons}\r\n           onShowChart={onShow}\r\n           onClose={this._handleClose}\r\n       >\r\n        <D.Toolbar\r\n           isShow={isToolbar}\r\n           buttons={this.toolbarButtons}\r\n        />\r\n        <D.RowInputText\r\n           ref={this._refInputOne}\r\n           isShowLabel={isShowLabels}\r\n           caption={oneTitle}\r\n           placeholder={onePlaceholder}\r\n           onEnter={this._handleLoad}\r\n        />\r\n        <D.ValidationMessages\r\n           validationMessages={validationMessages}\r\n        />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogType1\r\n"]}