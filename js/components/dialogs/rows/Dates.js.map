{"version":3,"sources":["../../../../src/components/dialogs/rows/Dates.jsx"],"names":["ERROR_FORMAT","FROM_DATE","TO_DATE","ERROR_FROM_NEAR_TO","Dates","_refFromDate","fromDate","c","_refToDate","toDate","props","isShowLabels","initFromDate","initToDate","onTestDate","styles","rowDiv","labelSpan","getValue","setValue","msgOnNotValidFormat","datesMsg","isValid","push","trim","length","focusInput","Component","defaultProps","item"],"mappings":"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","file":"Dates.js","sourcesContent":["import React, { Component } from 'react';\r\nimport InputDate from '../../zhn-atoms/InputDate';\r\nimport styles from '../../styles/DialogStyles'\r\nimport Caption from './Caption'\r\n\r\nconst ERROR_FORMAT = \"YYYY-MM-DD format must be\"\r\n    , FROM_DATE = \"From Date\"\r\n    , TO_DATE = \"To Date\"\r\n    , ERROR_FROM_NEAR_TO = \"From Date is near that To Date\";\r\n\r\nclass Dates extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isShowLabels: PropTypes.bool,\r\n    initFromDate: PropTypes.string,\r\n    initToDate: PropTypes.string,\r\n    onTestDate: PropTypes.func,\r\n    msgOnNotValidFormat: PropTypes.func\r\n  }\r\n  */\r\n  static defaultProps = {\r\n    isShowLabels: true,\r\n    msgOnNotValidFormat: item => `${item} is not in valid format`\r\n  }\r\n\r\n  _refFromDate = c => this.fromDate = c\r\n  _refToDate = c => this.toDate = c\r\n\r\n  render(){\r\n    const {\r\n      isShowLabels,\r\n      initFromDate,\r\n      initToDate,\r\n      onTestDate\r\n    } = this.props;\r\n    return (\r\n        <div>\r\n          <div style={styles.rowDiv}>\r\n            <Caption\r\n              is={isShowLabels}\r\n              style={styles.labelSpan}\r\n              caption=\"From Date\"\r\n            />\r\n            <InputDate\r\n               ref={this._refFromDate}\r\n               initValue={initFromDate}\r\n               errorMsg={ERROR_FORMAT}\r\n               onTest={onTestDate}\r\n            />\r\n         </div>\r\n         <div style={styles.rowDiv}>\r\n           <Caption\r\n              is={isShowLabels}\r\n              style={styles.labelSpan}\r\n              caption=\"To Date\"\r\n            />\r\n            <InputDate\r\n                 ref={this._refToDate}\r\n                 initValue={initToDate}\r\n                 errorMsg={ERROR_FORMAT}\r\n                 onTest={onTestDate}\r\n            />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n\r\n  getValues(){\r\n    return {\r\n      fromDate: this.fromDate.getValue(),\r\n      toDate: this.toDate.getValue()\r\n    };\r\n  }\r\n\r\n  setValues(fromDate, toDate){\r\n     this.fromDate.setValue(fromDate)\r\n     this.toDate.setValue(toDate)\r\n  }\r\n\r\n  getValidation(){\r\n    const { msgOnNotValidFormat } = this.props\r\n        ,  datesMsg = [];\r\n    if (!this.fromDate.isValid()) { datesMsg.push(msgOnNotValidFormat(FROM_DATE)) }\r\n    if (!this.toDate.isValid())   { datesMsg.push(msgOnNotValidFormat(TO_DATE)) }\r\n\r\n    if (this.fromDate.getValue().trim() > this.toDate.getValue().trim() ) {\r\n      datesMsg.push(ERROR_FROM_NEAR_TO)\r\n    }\r\n\r\n    if (datesMsg.length>0){\r\n      return { isValid: false, datesMsg };\r\n    }\r\n    return { isValid : true };\r\n  }\r\n\r\n  focusInput(){\r\n    this.fromDate.focusInput()\r\n  }\r\n\r\n  focusNotValidInput(){\r\n    if (!this.fromDate.isValid()){\r\n       this.fromDate.focusInput()\r\n       return true;\r\n    }\r\n    if (!this.toDate.isValid()){\r\n      this.toDate.focusInput()\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default Dates\r\n"]}