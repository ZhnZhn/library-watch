{"version":3,"file":"DialogType3A.js","names":["_uiApi","require","_memoFn","_useToggle","_interopRequireDefault","_useDialog","_useDialogButtons","_Dialog","_DialogCell","_jsxRuntime","_crValidationMessages","repo","isValid","datesMsg","oneTitle","msg","push","length","DialogType3A","memoIsShow","_ref","isShow","caption","requestType","onePlaceholder","onLoad","onShow","onClose","isShowDate","toggleIsShowDate","useToggle","MENU_MODEL","TOOLBAR_BUTTONS","isToolbar","isShowLabels","useDialog","_refInputOne","useRef","_refInputDates","validationMessages","COMMAND_BUTTONS","hClose","hLoad","useDialogButtons","setValidationMessages","clearValidationMessages","getRefValue","getValue","_datesInst","getValidation","fromDate","toDate","getValues","_validationMessage","jsxs","default","menuModel","toolbarButtons","commandButtons","children","jsx","RowInputText","refEl","isShowLabel","placeholder","onEnter","RowInputDatePeriod","_default","exports"],"sources":["../../../src/components/dialogs/DialogType3A.jsx"],"sourcesContent":["import {\r\n  useRef,\r\n  getRefValue\r\n} from '../uiApi';\r\n\r\nimport { memoIsShow } from '../hoc/memoFn';\r\n\r\nimport useToggle from '../hooks/useToggle';\r\nimport useDialog from './useDialog';\r\nimport useDialogButtons from './useDialogButtons';\r\n\r\nimport Dialog from './Dialog';\r\nimport D from './DialogCell';\r\n\r\nconst _crValidationMessages = (\r\n  repo,\r\n  isValid,\r\n  datesMsg,\r\n  oneTitle\r\n) => {\r\n    const msg = [];\r\n    if (!repo) {\r\n       msg.push(`${oneTitle} is required`);\r\n    }\r\n    if (!isValid) {\r\n      msg.push(datesMsg);\r\n    }\r\n    msg.isValid = (msg.length === 0)\r\n    return msg;\r\n};\r\n\r\nconst DialogType3A = memoIsShow(({\r\n  isShow,\r\n  caption,\r\n  requestType,\r\n  oneTitle,\r\n  onePlaceholder,\r\n  onLoad,\r\n  onShow,\r\n  onClose\r\n}) => {\r\n  const [\r\n    isShowDate,\r\n    toggleIsShowDate\r\n  ] = useToggle()\r\n  , [\r\n    MENU_MODEL,\r\n    TOOLBAR_BUTTONS,\r\n    isToolbar,\r\n    isShowLabels\r\n  ] = useDialog(toggleIsShowDate)\r\n  , _refInputOne = useRef()\r\n  , _refInputDates = useRef()\r\n  , [\r\n    validationMessages,\r\n    COMMAND_BUTTONS,\r\n    hClose,\r\n    hLoad\r\n  ] = useDialogButtons((\r\n    setValidationMessages,\r\n    clearValidationMessages\r\n  ) => {\r\n    const repo = getRefValue(_refInputOne).getValue()\r\n    , _datesInst = getRefValue(_refInputDates)\r\n    , { isValid, datesMsg } = _datesInst.getValidation()\r\n    , { fromDate, toDate } = _datesInst.getValues()\r\n    , _validationMessage = _crValidationMessages(\r\n      repo, isValid, datesMsg, oneTitle\r\n    )\r\n    if (_validationMessage.isValid){\r\n      onLoad({\r\n        repo,\r\n        requestType,\r\n        fromDate,\r\n        toDate\r\n      });\r\n      clearValidationMessages()\r\n    } else {\r\n      setValidationMessages(_validationMessage)\r\n    }\r\n  }, onClose);\r\n\r\n  return (\r\n    <Dialog\r\n       isShow={isShow}\r\n       isToolbar={isToolbar}\r\n       caption={caption}\r\n       menuModel={MENU_MODEL}\r\n       toolbarButtons={TOOLBAR_BUTTONS}\r\n       commandButtons={COMMAND_BUTTONS}\r\n       validationMessages={validationMessages}\r\n       onShow={onShow}\r\n       onClose={hClose}\r\n    >\r\n      <D.RowInputText\r\n         refEl={_refInputOne}\r\n         isShowLabel={isShowLabels}\r\n         caption={oneTitle}\r\n         placeholder={onePlaceholder}\r\n         onEnter={hLoad}\r\n      />\r\n      <D.RowInputDatePeriod\r\n        refEl={_refInputDates}\r\n        isShow={isShowDate}\r\n        isShowLabels={isShowLabels}\r\n      />\r\n    </Dialog>\r\n  );\r\n});\r\n\r\nexport default DialogType3A\r\n"],"mappings":"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","ignoreList":[]}