{"version":3,"sources":["../../../src/components/dialogs/DialogType3A.jsx"],"names":["crMenuMore","helperFns","crButtons","_initFromDate","DateUtils","getFromDate","_initToDate","getToDate","_onTestDate","isValidDate","DialogType3A","Decor","withToolbar","withValidationLoad","props","_handleDefault","datesFragment","setValues","_handleClear","inputOne","setValue","setState","validationMessages","_handleLoad","_handleLoadWithValidation","_createValidationMessages","_createLoadOption","msg","repo","getValue","concat","oneTitle","getValidation","isValid","datesMsg","length","getValues","fromDate","toDate","requestType","_handleClose","_handleCloseWithValidation","_refInputOne","c","_refInputDates","stock","toolbarButtons","_createType2WithToolbar","hasDate","_menuMore","toggleDates","_clickDateWithToolbar","toggleLabels","_clickLabelWithToolbar","toggleToolBar","_toggleWithToolbar","_commandButtons","inst","isDefault","state","isToolbar","isShowLabels","isShowDate","nextProps","nextState","isShow","caption","onShow","onePlaceholder","Component"],"mappings":"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","file":"DialogType3A.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport DateUtils from '../../utils/DateUtils'\r\n\r\nimport D from './DialogCell'\r\nimport Decor from './decorators/Decorators'\r\nimport helperFns from './helperFns/helperFns'\r\n\r\nconst { crMenuMore, crButtons } = helperFns;\r\n\r\nconst _initFromDate = DateUtils.getFromDate(1)\r\n    , _initToDate = DateUtils.getToDate()\r\n    , _onTestDate = DateUtils.isValidDate;\r\n\r\n@Decor.withToolbar\r\n@Decor.withValidationLoad\r\nclass DialogType3A extends Component {\r\n  /*\r\n  static propTypes = {\r\n    caption: PropTypes.string,\r\n    requestType: PropTypes.string,\r\n    oneTitle: PropTypes.string,\r\n    onePlaceholder: PropTypes.string,\r\n    isShow: PropTypes.bool,\r\n    onShow: PropTypes.func\r\n  }\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    this.stock = null\r\n    this.toolbarButtons = this._createType2WithToolbar(props, {\r\n      hasDate: true\r\n    })\r\n    this._menuMore = crMenuMore(this, {\r\n      toggleDates: this._clickDateWithToolbar,\r\n      toggleLabels: this._clickLabelWithToolbar,\r\n      toggleToolBar: this._toggleWithToolbar,\r\n    })\r\n    this._commandButtons = crButtons({\r\n      inst: this, isDefault: true\r\n    })\r\n    this.state = {\r\n      isToolbar: true,\r\n      isShowLabels: true,\r\n      isShowDate: true,\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.props !== nextProps){\r\n       if (this.props.isShow === nextProps.isShow){\r\n          return false;\r\n       }\r\n    }\r\n    return true;\r\n  }\r\n\r\n _handleDefault = () => {\r\n    this.datesFragment.setValues(_initFromDate, _initToDate)\r\n }\r\n\r\n _handleClear = () => {\r\n    this.inputOne.setValue('')\r\n    this.setState({ validationMessages: []})\r\n }\r\n\r\n  _handleLoad = () => {\r\n     this._handleLoadWithValidation(\r\n       this._createValidationMessages(),\r\n       this._createLoadOption\r\n     )\r\n   }\r\n   _createValidationMessages = () => {\r\n       let msg = [];\r\n\r\n       const repo = this.inputOne.getValue()\r\n       if (!repo) {\r\n          msg = msg.concat(`${this.props.oneTitle} is required`);\r\n       }\r\n\r\n       const { isValid, datesMsg } = this.datesFragment.getValidation();\r\n       if (!isValid) { msg = msg.concat(datesMsg); }\r\n\r\n       msg.isValid = (msg.length === 0) ? true : false;\r\n       return msg;\r\n   }\r\n   _createLoadOption = () => {\r\n     const repo = this.inputOne.getValue()\r\n         , { fromDate, toDate } = this.datesFragment.getValues()\r\n         , { requestType } = this.props;\r\n\r\n     return {\r\n       repo, requestType,\r\n       fromDate, toDate\r\n     };\r\n   }\r\n\r\n   _handleClose = () => {\r\n      this._handleCloseWithValidation(\r\n         this._createValidationMessages\r\n      );\r\n    }\r\n\r\n  _refInputOne = c => this.inputOne = c\r\n  _refInputDates = c => this.datesFragment = c\r\n\r\n   render(){\r\n     const {\r\n        caption, isShow, onShow,\r\n        oneTitle, onePlaceholder\r\n      } = this.props\r\n    , {\r\n      isToolbar,\r\n      isShowLabels,\r\n      isShowDate,\r\n      validationMessages\r\n    } = this.state;\r\n\r\n    return (\r\n       <D.DraggableDialog\r\n           isShow={isShow}\r\n           caption={caption}\r\n           menuModel={this._menuMore}\r\n           commandButtons={this._commandButtons}\r\n           onShowChart={onShow}\r\n           onClose={this._handleClose}\r\n       >\r\n         <D.Toolbar\r\n            isShow={isToolbar}\r\n            buttons={this.toolbarButtons}\r\n         />\r\n        <D.RowInputText\r\n           ref={this._refInputOne}\r\n           isShowLabel={isShowLabels}\r\n           caption={oneTitle}\r\n           placeholder={onePlaceholder}\r\n           onEnter={this._handleLoad}\r\n        />\r\n        <D.ShowHide isShow={isShowDate}>\r\n          <D.Dates\r\n              ref={this._refInputDates}\r\n              isShowLabels={isShowLabels}\r\n              initFromDate={_initFromDate}\r\n              initToDate={_initToDate}\r\n              onTestDate={_onTestDate}\r\n          />\r\n        </D.ShowHide>\r\n        <D.ValidationMessages\r\n           validationMessages={validationMessages}\r\n        />\r\n      </D.DraggableDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogType3A\r\n"]}