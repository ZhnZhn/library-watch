{"version":3,"sources":["../../../src/components/dialogs/DatesFragment.jsx"],"names":["STYLE","ROW_DIV","margin","LABEL_SPAN","color","display","textAlign","width","paddingRight","fontSize","fontWeight","ERROR_FORMAT","FROM_DATE","TO_DATE","ERROR_FROM_NEAR_TO","DatesFragment","createClass","displayName","getDefaultProps","msgOnNotValidFormat","item","render","props","initFromDate","initToDate","onTestDate","fromDate","c","toDate","getValues","getValue","setValues","setValue","getValidation","datesMsg","isValid","push","trim","length","focusInput","focusNotValidInput"],"mappings":"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","file":"DatesFragment.js","sourcesContent":["import React from 'react';\r\n\r\nimport InputDate from '../zhnAtoms/InputDate';\r\n\r\nconst STYLE = {\r\n  ROW_DIV : {\r\n    margin: '5px'\r\n  },\r\n\r\n  LABEL_SPAN : {\r\n    color: '#1B75BB',\r\n    display: 'inline-block',\r\n    textAlign: 'right',\r\n    width: '120px',\r\n    paddingRight: '5px',\r\n    fontSize: '16px',\r\n    fontWeight: 'bold'\r\n  }\r\n}\r\n\r\nconst ERROR_FORMAT = \"YYYY-MM-DD format must be\"\r\n    , FROM_DATE = \"From Date\"\r\n    , TO_DATE = \"To Date\"\r\n    , ERROR_FROM_NEAR_TO = \"From Date is near that To Date\";\r\n\r\nconst DatesFragment = React.createClass({\r\n  displayName : 'DatesFragment',\r\n  getDefaultProps(){\r\n    return  {\r\n      msgOnNotValidFormat : (item) => `${item} is not in valid format`\r\n    }\r\n  },\r\n\r\n  render(){\r\n    const { initFromDate, initToDate, onTestDate } = this.props;\r\n    return (\r\n        <div>\r\n          <div style={STYLE.ROW_DIV}>\r\n            <span style={STYLE.LABEL_SPAN}>\r\n               From Date:\r\n            </span>\r\n            <InputDate\r\n               ref={c => this.fromDate = c}\r\n               initValue={initFromDate}\r\n               errorMsg={ERROR_FORMAT}\r\n               onTest={onTestDate}\r\n            />\r\n         </div>\r\n         <div style={STYLE.ROW_DIV}>\r\n            <span style={STYLE.LABEL_SPAN}>\r\n              To Date:\r\n            </span>\r\n            <InputDate\r\n                 ref={c => this.toDate = c}\r\n                 initValue={initToDate}\r\n                 errorMsg={ERROR_FORMAT}\r\n                 onTest={onTestDate}\r\n            />\r\n         </div>\r\n       </div>\r\n    );\r\n  },\r\n\r\n  getValues(){\r\n    return {\r\n      fromDate: this.fromDate.getValue(),\r\n      toDate: this.toDate.getValue()\r\n    }\r\n  },\r\n\r\n  setValues(fromDate, toDate){\r\n     this.fromDate.setValue(fromDate);\r\n     this.toDate.setValue(toDate);\r\n  },\r\n\r\n  getValidation(){\r\n    const {msgOnNotValidFormat} = this.props\r\n        ,  datesMsg = [];\r\n    if (!this.fromDate.isValid()) { datesMsg.push(msgOnNotValidFormat(FROM_DATE)); }\r\n    if (!this.toDate.isValid())   { datesMsg.push(msgOnNotValidFormat(TO_DATE)); }\r\n\r\n    if (this.fromDate.getValue().trim() > this.toDate.getValue().trim() ) {\r\n      datesMsg.push(ERROR_FROM_NEAR_TO);\r\n    }\r\n\r\n    if (datesMsg.length>0){\r\n      return { isValid: false, datesMsg }\r\n    }\r\n    return { isValid : true}\r\n  },\r\n\r\n  focusInput(){\r\n    this.fromDate.focusInput();\r\n  },\r\n\r\n  focusNotValidInput(){\r\n    if (!this.fromDate.isValid()){\r\n       this.fromDate.focusInput();\r\n       return true;\r\n    }\r\n    if (!this.toDate.isValid()){\r\n      this.toDate.focusInput();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n});\r\n\r\nexport default DatesFragment;\r\n"]}