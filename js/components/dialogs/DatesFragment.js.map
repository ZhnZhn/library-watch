{"version":3,"sources":["../../../src/components/dialogs/DatesFragment.jsx"],"names":["STYLE","ROW_DIV","margin","LABEL_SPAN","color","display","textAlign","width","paddingRight","fontSize","fontWeight","ERROR_FORMAT","FROM_DATE","TO_DATE","ERROR_FROM_NEAR_TO","DatesFragment","props","initFromDate","initToDate","onTestDate","fromDate","c","toDate","getValue","setValue","msgOnNotValidFormat","datesMsg","isValid","push","trim","length","focusInput","Component","defaultProps","item"],"mappings":"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","file":"DatesFragment.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport InputDate from '../zhnAtoms/InputDate'\r\n\r\nconst STYLE = {\r\n  ROW_DIV : {\r\n    margin: '5px'\r\n  },\r\n  LABEL_SPAN : {\r\n    color: '#1B75BB',\r\n    display: 'inline-block',\r\n    textAlign: 'right',\r\n    width: '120px',\r\n    paddingRight: '5px',\r\n    fontSize: '16px',\r\n    fontWeight: 'bold'\r\n  }\r\n}\r\n\r\nconst ERROR_FORMAT = \"YYYY-MM-DD format must be\"\r\n    , FROM_DATE = \"From Date\"\r\n    , TO_DATE = \"To Date\"\r\n    , ERROR_FROM_NEAR_TO = \"From Date is near that To Date\";\r\n\r\nclass DatesFragment extends Component {\r\n  /*\r\n  static propTypes = {\r\n    initFromDate: PropTypes.string,\r\n    initToDate: PropTypes.string,\r\n    onTestDate: PropTypes.func,\r\n    msgOnNotValidFormat: PropTypes.func\r\n  }\r\n  */\r\n  static defaultProps = {\r\n    msgOnNotValidFormat: item => `${item} is not in valid format`\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      initFromDate,\r\n      initToDate,\r\n      onTestDate\r\n    } = this.props;\r\n    return (\r\n        <div>\r\n          <div style={STYLE.ROW_DIV}>\r\n            <span style={STYLE.LABEL_SPAN}>\r\n               From Date:\r\n            </span>\r\n            <InputDate\r\n               ref={c => this.fromDate = c}\r\n               initValue={initFromDate}\r\n               errorMsg={ERROR_FORMAT}\r\n               onTest={onTestDate}\r\n            />\r\n         </div>\r\n         <div style={STYLE.ROW_DIV}>\r\n            <span style={STYLE.LABEL_SPAN}>\r\n              To Date:\r\n            </span>\r\n            <InputDate\r\n                 ref={c => this.toDate = c}\r\n                 initValue={initToDate}\r\n                 errorMsg={ERROR_FORMAT}\r\n                 onTest={onTestDate}\r\n            />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n\r\n  getValues(){\r\n    return {\r\n      fromDate: this.fromDate.getValue(),\r\n      toDate: this.toDate.getValue()\r\n    };\r\n  }\r\n\r\n  setValues(fromDate, toDate){\r\n     this.fromDate.setValue(fromDate)\r\n     this.toDate.setValue(toDate)\r\n  }\r\n\r\n  getValidation(){\r\n    const { msgOnNotValidFormat } = this.props\r\n        ,  datesMsg = [];\r\n    if (!this.fromDate.isValid()) { datesMsg.push(msgOnNotValidFormat(FROM_DATE)) }\r\n    if (!this.toDate.isValid())   { datesMsg.push(msgOnNotValidFormat(TO_DATE)) }\r\n\r\n    if (this.fromDate.getValue().trim() > this.toDate.getValue().trim() ) {\r\n      datesMsg.push(ERROR_FROM_NEAR_TO)\r\n    }\r\n\r\n    if (datesMsg.length>0){\r\n      return { isValid: false, datesMsg };\r\n    }\r\n    return { isValid : true };\r\n  }\r\n\r\n  focusInput(){\r\n    this.fromDate.focusInput()\r\n  }\r\n\r\n  focusNotValidInput(){\r\n    if (!this.fromDate.isValid()){\r\n       this.fromDate.focusInput()\r\n       return true;\r\n    }\r\n    if (!this.toDate.isValid()){\r\n      this.toDate.focusInput()\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default DatesFragment\r\n"]}