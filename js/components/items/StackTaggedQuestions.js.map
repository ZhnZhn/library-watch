{"version":3,"sources":["../../../src/components/items/StackTaggedQuestions.jsx"],"names":["ITEM_DESCRIPTION","styles","rootDiv","lineHeight","marginBottom","marginRight","position","captionSpanOpen","display","color","cursor","maxWidth","fontWeight","whiteSpace","textOverflow","overflow","float","SPAN_VERSION","paddingLeft","paddingRight","BTN_CIRCLE","marginLeft","SPAN_TAG","backgroundColor","paddingTop","paddingBottom","marginTop","borderRadius","PURPLE_BADGE","fontSize","GREEN_BADGE","BLACK_BAGDE","StackTaggedQuestions","state","isShow","_handlerToggleOpen","setState","_handlerClickWatch","props","repo","requestType","onWatchItem","caption","descr","config","version","_renderCommits","items","map","item","index","answer_count","score","view_count","title","dateAgo","link","owner","tags","reputation","display_name","className","_renderTags","tag","onCloseItem","_items_count","length","_styleCaption","Component"],"mappings":"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","file":"StackTaggedQuestions.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Caption from './ItemCaption'\r\nimport ShowHide from '../zhnAtoms/ShowHide';\r\nimport DateAgo from '../zhnAtoms/DateAgo';\r\n\r\nconst ITEM_DESCRIPTION = \"GitHub Repository Commits\"\r\n\r\nconst styles = {\r\n  rootDiv : {\r\n    lineHeight : 1.5,\r\n    marginBottom: '10px',\r\n    marginRight: '25px',\r\n    //marginRight: '10px',\r\n    position : 'relative'\r\n  },\r\n  captionSpanOpen : {\r\n    display : 'inline-block',\r\n    color: 'rgba(164, 135, 212, 1)',\r\n    cursor: 'pointer',\r\n    maxWidth: '500px',\r\n    fontWeight : 'bold',\r\n    whiteSpace: 'nowrap',\r\n    textOverflow : 'ellipsis',\r\n    overflow : 'hidden',\r\n    float : 'left'\r\n  },\r\n\r\n  SPAN_VERSION : {\r\n    color: '#80c040',\r\n    paddingLeft : '10px',\r\n    paddingRight : '10px'\r\n  },\r\n  BTN_CIRCLE : {\r\n    marginLeft: '10px'\r\n  },\r\n  SPAN_TAG : {\r\n    display: 'inline-block',\r\n    color: 'black',\r\n    backgroundColor: 'gray',\r\n    paddingTop: '4px',\r\n    paddingLeft: '8px',\r\n    paddingRight: '8px',\r\n    paddingBottom: '4px',\r\n    marginLeft: '8px',\r\n    marginRight: '8px',\r\n    marginTop: '6px',\r\n    marginBottom: '2px',\r\n    borderRadius: '16px'\r\n  },\r\n\r\n  PURPLE_BADGE : {\r\n    color: '#a487d4', fontSize: '18px', paddingRight: '8px'\r\n  },\r\n  GREEN_BADGE : {\r\n    color: '#80c040', fontSize: '18px', paddingRight: '8px'\r\n  },\r\n  BLACK_BAGDE : {\r\n    color: 'black', fontSize: '18px', paddingRight: '8px'\r\n  }\r\n}\r\n\r\nclass StackTaggedQuestions extends Component {\r\n  state = {\r\n    isShow: true\r\n  }\r\n\r\n  _handlerToggleOpen = () => {\r\n    this.setState({ isShow: !this.state.isShow })\r\n  }\r\n\r\n  _handlerClickWatch = () => {\r\n    const { repo, requestType, onWatchItem } = this.props\r\n        , caption = `${repo}`\r\n        , descr = ITEM_DESCRIPTION\r\n    onWatchItem({\r\n       caption : caption,\r\n       config : { repo, requestType, version : '', caption, descr }\r\n    });\r\n  }\r\n\r\n  _renderCommits = (items) => {\r\n     return items.map((item, index) => {\r\n        const {\r\n                 answer_count, score, view_count,\r\n                 title, dateAgo, link,\r\n                 owner, tags\r\n               } = item\r\n            , { reputation, display_name } = owner\r\n            , className = (index % 2)\r\n                     ? 'row-even not-selected'\r\n                     : 'row-odd not-selected'\r\n\r\n        return (\r\n           <div key={index} className={className}>\r\n              <a href={link}>\r\n              <div style={{ paddingBottom: '8px' }}>\r\n                <span style={styles.PURPLE_BADGE}>\r\n                  &#9874;&nbsp;{answer_count}\r\n                </span>\r\n                <span style={styles.GREEN_BADGE}>\r\n                  &#9918;&nbsp;{score}\r\n                </span>\r\n                <span style={styles.BLACK_BAGDE}>\r\n                  &#9784;&nbsp;{view_count}\r\n                </span>\r\n                <span style={styles.GREEN_BADGE}>\r\n                  &#9752;&nbsp;{reputation}\r\n                </span>\r\n                <span style={styles.BLACK_BAGDE}>\r\n                  {display_name}\r\n                </span>\r\n                <DateAgo\r\n                   dateAgo={dateAgo}\r\n                   date={\"\"}\r\n                />\r\n              </div>\r\n                <div>\r\n                  {title}\r\n                </div>\r\n                <div>\r\n                  {this._renderTags(tags)}\r\n                </div>\r\n              </a>\r\n           </div>\r\n        );\r\n     })\r\n  }\r\n\r\n  _renderTags = (tags) => {\r\n    return tags.map((tag, index) => {\r\n       return (\r\n         <span key={index} style={styles.SPAN_TAG}>\r\n            {tag}\r\n         </span>\r\n       );\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            repo, caption, items=[],\r\n            onCloseItem\r\n           } = this.props\r\n        , _items_count = items.length\r\n        , _styleCaption = styles.captionSpanOpen\r\n        , { isShow } = this.state;\r\n\r\n     return (\r\n       <div style={styles.rootDiv}>\r\n         <Caption onClose={onCloseItem}>\r\n           <span\r\n              className=\"not-selected\"\r\n              title={caption}\r\n              style={_styleCaption}\r\n              onClick={this._handlerToggleOpen}\r\n           >\r\n             <span>\r\n               {repo}\r\n             </span>\r\n             <span style={{ color: '#a9a9a9', paddingLeft: '12px' }}>\r\n                {_items_count}\r\n             </span>\r\n           </span>\r\n         </Caption>\r\n         <ShowHide isShow={isShow}>\r\n           {this._renderCommits(items)}\r\n         </ShowHide>\r\n       </div>\r\n     );\r\n  }\r\n}\r\n\r\nexport default StackTaggedQuestions\r\n"]}