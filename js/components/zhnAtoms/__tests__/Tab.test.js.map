{"version":3,"sources":["../../../../src/components/zhnAtoms/__tests__/Tab.test.js"],"names":["_fnGetWrapper","props","title","wrapper","t","true","is","text","selected","borderColor","color","isSelected","style","onClickSpy","sinon","spy","onClick","simulate","calledOnce"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,SAAO,qBAAQ,8BAAC,aAAD,EAASA,KAAT,CAAR,CAAP;AACD,CAFD;;AAIA,mBAAK,sCAAL,EAA6C,aAAK;AAChD,MAAMC,QAAQ,OAAd;AAAA,MACMC,UAAUH,cAAc,EAAEE,YAAF,EAAd,CADhB;;AAGAE,IAAEC,IAAF,CAAOF,QAAQG,EAAR,CAAW,IAAX,CAAP;AACAF,IAAEE,EAAF,CAAKH,QAAQI,IAAR,EAAL,EAAqBL,KAArB;AACD,CAND;;AAQA,mBAAK,kDAAL,EAAyD,aAAK;AAC3D,MAAMM,WAAW;AACPC,iBAAc,wBADP;AAEPC,WAAQ;AAFD,GAAjB;AAAA,MAIMP,UAAUH,cAAc,EAAEW,YAAa,IAAf,EAAd,CAJhB;;AAMAP,IAAEE,EAAF,CAAKH,QAAQF,KAAR,GAAgBW,KAAhB,CAAsBF,KAA3B,EAAkCF,SAASE,KAA3C;AACAN,IAAEE,EAAF,CAAKH,QAAQF,KAAR,GAAgBW,KAAhB,CAAsBH,WAA3B,EAAwCD,SAASC,WAAjD;AACF,CATD;;AAWA,mBAAK,iDAAL,EAAwD,aAAK;AACzD,MAAMI,aAAaC,gBAAMC,GAAN,EAAnB;AAAA,MACMZ,UAAUH,cAAc,EAAEgB,SAAUH,UAAZ,EAAd,CADhB;;AAGAV,UAAQc,QAAR,CAAiB,OAAjB;AACAb,IAAEC,IAAF,CAAOQ,WAAWK,UAAlB;AACH,CAND","file":"Tab.test.js","sourcesContent":["import React from 'react';\r\n\r\nimport test from 'ava';\r\nimport { shallow } from 'enzyme';\r\nimport sinon from 'sinon';\r\n\r\nimport Tab from '../../../../js/components/zhnAtoms/Tab';\r\n\r\nconst _fnGetWrapper = (props) => {\r\n  return shallow(<Tab {...props} />);\r\n}\r\n\r\ntest('render root li with props title text', t => {\r\n  const title = 'title'\r\n      , wrapper = _fnGetWrapper({ title })\r\n\r\n  t.true(wrapper.is('li'));\r\n  t.is(wrapper.text(), title);\r\n})\r\n\r\ntest('should use props isSelected for inner style root', t => {\r\n   const selected = {\r\n             borderColor : 'rgba(164, 135, 212, 1)',\r\n             color : 'rgba(164, 135, 212, 1)'\r\n         }\r\n       , wrapper = _fnGetWrapper({ isSelected : true })\r\n\r\n   t.is(wrapper.props().style.color, selected.color);\r\n   t.is(wrapper.props().style.borderColor, selected.borderColor);\r\n})\r\n\r\ntest('should use prop onClick for click event on root', t => {\r\n    const onClickSpy = sinon.spy()\r\n        , wrapper = _fnGetWrapper({ onClick : onClickSpy })\r\n\r\n    wrapper.simulate('click')\r\n    t.true(onClickSpy.calledOnce);\r\n})\r\n"]}