{"version":3,"sources":["../../../src/components/zhnAtoms/InputFileReader.jsx"],"names":["InputFileReader","createClass","getInitialState","labelText","_handleChange","e","files","i","target","length","push","Promise","all","map","resolve","reject","reader","FileReader","onload","result","file","props","as","toLowerCase","readAsBinaryString","readAsArrayBuffer","readAsText","readAsDataURL","then","zippedResults","setState","name","onChange","render","state"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB,gBAAMC,WAAN,CAAkB;AAAA;AACvCC,iBADuC,6BACtB;AACf,WAAO;AACLC,iBAAY;AADP,KAAP;AAGD,GALsC;AAOxCC,eAPwC,yBAO1BC,CAP0B,EAOxB;AAAA;;AACd,QAAMC,QAAQ,EAAd;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,EAAEG,MAAF,CAASF,KAAT,CAAeG,MAAnC,EAA2CF,GAA3C,EAAgD;AAC9C;AACAD,YAAMI,IAAN,CAAWL,EAAEG,MAAF,CAASF,KAAT,CAAeC,CAAf,CAAX;AACD;;AAED;AACAI,YAAQC,GAAR,CAAYN,MAAMO,GAAN,CAAU;AAAA,aAAQ,IAAIF,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AAC7D,YAAIC,SAAS,IAAIC,UAAJ,EAAb;;AAEAD,eAAOE,MAAP,GAAgB,kBAAU;AACxB;AACAJ,kBAAQ,CAACK,MAAD,EAASC,IAAT,CAAR;AACD,SAHD;;AAKA;AACA,gBAAQ,CAAC,MAAKC,KAAL,CAAWC,EAAX,IAAiB,KAAlB,EAAyBC,WAAzB,EAAR;AACE,eAAK,QAAL;AACEP,mBAAOQ,kBAAP,CAA0BJ,IAA1B;AACA;AACF,eAAK,QAAL;AACEJ,mBAAOS,iBAAP,CAAyBL,IAAzB;AACA;AACF,eAAK,MAAL;AACEJ,mBAAOU,UAAP,CAAkBN,IAAlB;AACA;AACF,eAAK,KAAL;AACEJ,mBAAOW,aAAP,CAAqBP,IAArB;AACA;AACF;AACEJ,mBAAOU,UAAP,CAAkBN,IAAlB;AAdJ;AAgBD,OAzB6B,CAAR;AAAA,KAAV,CAAZ,EA0BCQ,IA1BD,CA0BM,yBAAiB;;AAErB;AACA,UAAIC,iBAAiBA,cAAc,CAAd,CAArB,EAAuC;AACrC,YAAMT,OAAOS,cAAc,CAAd,EAAiB,CAAjB,CAAb;AACA,cAAKC,QAAL,CAAc,EAAE3B,WAAWiB,KAAKW,IAAlB,EAAd;AACA,cAAKV,KAAL,CAAWW,QAAX,CAAoBH,aAApB;AACD,OAJD,MAIO;AACL,cAAKC,QAAL,CAAc,EAAE3B,WAAW,kBAAb,EAAd;AACA,cAAKkB,KAAL,CAAWW,QAAX,CAAoBH,aAApB;AACD;AAEF,KAtCD;AAuCD,GAtDuC;AAwDxCI,QAxDwC,oBAwD/B;AAAA,oBACe,KAAKZ,KADpB,CACCC,EADD;AAAA,QACCA,EADD,6BACI,MADJ;AAAA,QAECnB,SAFD,GAEe,KAAK+B,KAFpB,CAEC/B,SAFD;;AAGP,WACE;AAAA;AAAA,QAAK,WAAU,0BAAf;AACE;AACE;AACA,mBAAU,WAFZ;AAGE,cAAK,MAHP;AAIE,YAAG,MAJL;AAKE,cAAK,MALP;AAME,YAAImB,EANN;AAOE,kBAAU,KAAKlB;AAPjB,QADF;AAUE;AAAA;AAAA,UAAO,SAAQ,MAAf;AACG;AAAA;AAAA,YAAK,OAAM,4BAAX,EAAwC,OAAM,IAA9C,EAAmD,QAAO,IAA1D,EAA+D,SAAQ,WAAvE;AAAmF,kDAAM,GAAE,4PAAR;AAAnF,SADH;AAEG;AAAA;AAAA;AAAOD;AAAP;AAFH;AAVF,KADF;AAiBD;AA5EuC,CAAlB,CAAxB;;kBA+EeH,e","file":"InputFileReader.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputFileReader = React.createClass({\r\n   getInitialState(){\r\n     return {\r\n       labelText : \"Choose a file...\"\r\n     }\r\n   },\r\n\r\n  _handleChange(e){\r\n    const files = [];\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      // Convert to Array.\r\n      files.push(e.target.files[i]);\r\n    }\r\n\r\n    // Build Promise List, each promise resolved by FileReader.onload.\r\n    Promise.all(files.map(file => new Promise((resolve, reject) => {\r\n      let reader = new FileReader();\r\n\r\n      reader.onload = result => {\r\n        // Resolve both the FileReader result and its original file.\r\n        resolve([result, file]);\r\n      };\r\n\r\n      // Read the file with format based on this.props.as.\r\n      switch ((this.props.as || 'url').toLowerCase()) {\r\n        case 'binary':\r\n          reader.readAsBinaryString(file);\r\n          break;\r\n        case 'buffer':\r\n          reader.readAsArrayBuffer(file);\r\n          break;\r\n        case 'text':\r\n          reader.readAsText(file);\r\n          break;\r\n        case 'url':\r\n          reader.readAsDataURL(file);\r\n          break;\r\n        default:\r\n          reader.readAsText(file);\r\n      }\r\n    })))\r\n    .then(zippedResults => {\r\n\r\n      // Run the callback after all files have been read.\r\n      if (zippedResults && zippedResults[0] ){\r\n        const file = zippedResults[0][1]\r\n        this.setState({ labelText: file.name })\r\n        this.props.onChange(zippedResults);\r\n      } else {\r\n        this.setState({ labelText: 'Choose a file...'});\r\n        this.props.onChange(zippedResults);\r\n      }\r\n\r\n    });\r\n  },\r\n\r\n  render() {\r\n    const { as='text' } = this.props\r\n        , { labelText } = this.state\r\n    return (\r\n      <div className=\"_react-file-reader-input\">\r\n        <input\r\n          //style={STYLE.INPUT}\r\n          className=\"inputfile\"\r\n          type=\"file\"\r\n          id=\"file\"\r\n          name=\"file\"\r\n          as={as}\r\n          onChange={this._handleChange}\r\n        />\r\n        <label htmlFor=\"file\">\r\n           <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"17\" viewBox=\"0 0 20 17\"><path d=\"M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z\"></path></svg>\r\n           <span>{labelText}</span>\r\n        </label>\r\n       </div>\r\n    );\r\n  }\r\n})\r\n\r\nexport default InputFileReader\r\n"]}