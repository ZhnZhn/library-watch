{"version":3,"sources":["../../../src/components/browser-watch/AddToWatchDialog.jsx"],"names":["styles","DialogStyles","actionCompleted","WatchActionTypes","EDIT_WATCH_COMPLETED","actionFailed","EDIT_WATCH_FAILED","forActionType","ADD_ITEM","AddToWatchDialog","WithValidation","displayName","getInitialState","store","props","groupCaption","listCaption","groupOptions","getWatchGroups","listOptions","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componetWillUnmount","actionType","data","state","length","setState","onClose","messages","componentWillReceiveProps","nextProps","isShow","groups","lists","getWatchListsByGroup","shouldComponentUpdate","nextState","_handlerSelectGroup","group","caption","_handlerSelectList","list","_handlerAdd","_getValidationMessages","isValid","config","WatchActions","addItem","_updateValidationMessages","msg","push","Msg","NOT_SELECTED","_handlerClose","render","descr","commandButtons","rowDiv","labelSpan","Object","assign","lineHeight","fontWeight","color"],"mappings":"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","file":"AddToWatchDialog.js","sourcesContent":["import React from 'react'\r\nimport createReactClass from 'create-react-class'\r\n\r\n//import PropTypes from 'prop-types'\r\n\r\nimport WithValidation from '../dialogs/WithValidation'\r\n\r\nimport WatchActions from '../../flux/actions/WatchActions'\r\nimport { WatchActionTypes } from '../../flux/actions/WatchActions'\r\nimport Msg from '../../constants/Msg'\r\n\r\nimport ModalDialog from '../zhnMoleculs/ModalDialog'\r\nimport ToolBarButton from '../header/ToolBarButton'\r\nimport InputSelect from '../zhn-select/InputSelect'\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment'\r\n\r\nimport DialogStyles from '../styles/DialogStyles'\r\n\r\nconst styles = DialogStyles;\r\n\r\nconst actionCompleted = WatchActionTypes.EDIT_WATCH_COMPLETED\r\n    , actionFailed =  WatchActionTypes.EDIT_WATCH_FAILED\r\n    , forActionType = WatchActionTypes.ADD_ITEM\r\n\r\nconst AddToWatchDialog = createReactClass({\r\n  ...WithValidation,\r\n\r\n  displayName : 'AddToWatchDialog',\r\n  /*\r\n  propTypes : {\r\n    isShow  : PropTypes.bool.isRequired,\r\n    data    : PropTypes.object.isRequired,\r\n    store   : PropTypes.object,\r\n    onClose : PropTypes.func.isRequired\r\n  },\r\n  */\r\n  getInitialState(){\r\n    const { store } = this.props;\r\n    this.groupCaption = null;\r\n    this.listCaption = null;\r\n    return {\r\n      groupOptions : store.getWatchGroups(),\r\n      listOptions : [],\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  },\r\n  componetWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    if (actionType === actionCompleted && data.forActionType === forActionType){\r\n       if (this.state.validationMessages.length>0){\r\n         this.setState({ validationMessages:[] });\r\n       }\r\n       this.props.onClose();\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n       this.setState({ validationMessages:data.messages });\r\n    }\r\n  },\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if (nextProps !== this.props && nextProps.isShow !== this.props.isShow) {\r\n      const groups = nextProps.store.getWatchGroups();\r\n      if (groups !== this.state.groupOptions){\r\n        this.groupCaption = null;\r\n        this.listCaption = null;\r\n        this.setState({groupOptions:groups, listOptions:[]});\r\n      } else if (this.groupCaption){\r\n        const lists = nextProps.store.getWatchListsByGroup(this.groupCaption);\r\n        if (lists !== this.state.listOptions){\r\n          this.listCaption = null;\r\n          this.setState({listOptions:lists})\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  _handlerSelectGroup(group){\r\n    if (group && group.caption){\r\n       //const {store} = this.props;\r\n       this.groupCaption = group.caption;\r\n       if (group.lists){\r\n         this.setState({listOptions : group.lists})\r\n       }  else {\r\n         this.setState({listOptions : []})\r\n       }\r\n    } else {\r\n      this.groupCaption = null;\r\n    }\r\n  },\r\n  _handlerSelectList(list){\r\n      if (list && list.caption){\r\n        this.listCaption = list.caption;\r\n      } else {\r\n        this.listCaption = null;\r\n      }\r\n  },\r\n  _handlerAdd(){\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      //onClose\r\n      const { data } = this.props\r\n          , { caption, config } = data\r\n          , { groupCaption, listCaption } = this;\r\n\r\n      WatchActions.addItem({ caption, groupCaption, listCaption, config });\r\n    } else {\r\n      this._updateValidationMessages(validationMessages);\r\n    }\r\n  },\r\n  _getValidationMessages(){\r\n    const msg = [];\r\n    if (!this.groupCaption){ msg.push(Msg.NOT_SELECTED('Group'));}\r\n    if (!this.listCaption) { msg.push(Msg.NOT_SELECTED('List'));}\r\n    msg.isValid = (msg.length === 0) ? true : false;\r\n    return msg;\r\n  },\r\n\r\n  _handlerClose(){\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({validationMessages:[]});\r\n    }\r\n    this.props.onClose();\r\n  },\r\n\r\n  render(){\r\n    //onClose\r\n    const { isShow, data } = this.props\r\n        , { caption, config={} } = data\r\n        , { descr } = config\r\n        , { groupOptions, listOptions, validationMessages } = this.state\r\n        , commandButtons =[\r\n       <ToolBarButton\r\n          key=\"a\"\r\n          type=\"TypeC\"\r\n          caption=\"Add\"\r\n          onClick={this._handlerAdd}\r\n       />\r\n    ];\r\n    return (\r\n      <ModalDialog\r\n         caption=\"Add To Watch List\"\r\n         isShow={isShow}\r\n         commandButtons={commandButtons}\r\n         onClose={this._handlerClose}\r\n      >\r\n        <div style={styles.rowDiv} key=\"1\">\r\n          <span style={styles.labelSpan}>\r\n            Group:\r\n          </span>\r\n          <InputSelect\r\n             width=\"250\"\r\n             options={groupOptions}\r\n             onSelect={this._handlerSelectGroup}\r\n           />\r\n        </div>\r\n        <div style={styles.rowDiv} key=\"2\">\r\n          <span style={styles.labelSpan}>\r\n            List:\r\n          </span>\r\n          <InputSelect\r\n             width=\"250\"\r\n             options={listOptions}\r\n             onSelect={this._handlerSelectList}\r\n           />\r\n        </div>\r\n        <div style={Object.assign({}, styles.rowDiv, {lineHeight: 2})} key=\"3\">\r\n          <span style={styles.labelSpan}>\r\n            Item:\r\n          </span>\r\n          <span style={{fontWeight: 'bold'}}>\r\n             {caption}\r\n          </span>\r\n        </div>\r\n        <div style={Object.assign({}, styles.rowDiv, {lineHeight: 2})} key=\"4\">\r\n          <span style={styles.labelSpan}>\r\n             Descr:\r\n          </span>\r\n          <span style={{ fontWeight: 'bold', color: 'gray' }}>\r\n             {descr}\r\n          </span>\r\n        </div>\r\n        <ValidationMessagesFragment\r\n           key=\"5\"\r\n           validationMessages={validationMessages}\r\n         />\r\n      </ModalDialog>\r\n    );\r\n  }\r\n});\r\n\r\nexport default AddToWatchDialog\r\n"]}