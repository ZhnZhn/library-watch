{"version":3,"sources":["../../../src/components/browser-watch/AddToWatchDialog.jsx"],"names":["styles","DialogStyles","actionCompleted","WAT","EDIT_WATCH_COMPLETED","actionFailed","EDIT_WATCH_FAILED","forActionType","ADD_ITEM","S","BOLD","fontWeight","LH","lineHeight","DESCR","color","AddToWatchDialog","WithValidation","displayName","getInitialState","store","props","groupCaption","listCaption","_commandButtons","_handlerAdd","groupOptions","getWatchGroups","listOptions","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componetWillUnmount","actionType","data","state","length","setState","onClose","messages","componentWillReceiveProps","nextProps","isShow","groups","lists","getWatchListsByGroup","shouldComponentUpdate","nextState","_handlerSelectGroup","group","caption","_handlerSelectList","list","_getValidationMessages","isValid","config","WatchActions","addItem","_updateValidationMessages","msg","push","Msg","NOT_SELECTED","_handlerClose","render","descr","rowDiv","labelSpan"],"mappings":"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","file":"AddToWatchDialog.js","sourcesContent":["import React from 'react'\r\nimport createReactClass from 'create-react-class'\r\n\r\n//import PropTypes from 'prop-types'\r\n\r\nimport WithValidation from '../dialogs/WithValidation'\r\n\r\nimport WatchActions from '../../flux/actions/WatchActions'\r\nimport { WatchActionTypes as WAT } from '../../flux/actions/WatchActions'\r\nimport Msg from '../../constants/Msg'\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\nimport InputSelect from '../zhn-select/InputSelect'\r\nimport ValidationMessagesFragment from '../zhn-moleculs/ValidationMessagesFragment';\r\n\r\nimport DialogStyles from '../styles/DialogStyles'\r\n\r\nconst styles = DialogStyles;\r\n\r\nconst actionCompleted = WAT.EDIT_WATCH_COMPLETED\r\n    , actionFailed =  WAT.EDIT_WATCH_FAILED\r\n    , forActionType = WAT.ADD_ITEM\r\n\r\nconst S = {\r\n  BOLD: {\r\n    fontWeight: 'bold'\r\n  },\r\n  LH: {\r\n    lineHeight: 2\r\n  },\r\n  DESCR: {\r\n    fontWeight: 'bold',\r\n    color: 'gray'\r\n  }\r\n};\r\n\r\nconst AddToWatchDialog = createReactClass({\r\n  ...WithValidation,\r\n\r\n  displayName : 'AddToWatchDialog',\r\n  /*\r\n  propTypes : {\r\n    isShow  : PropTypes.bool.isRequired,\r\n    data    : PropTypes.object.isRequired,\r\n    store   : PropTypes.object,\r\n    onClose : PropTypes.func.isRequired\r\n  },\r\n  */\r\n  getInitialState(){\r\n    const { store } = this.props;\r\n    this.groupCaption = null;\r\n    this.listCaption = null;\r\n    this._commandButtons = [\r\n      <FlatButton\r\n        key=\"add\"\r\n        caption=\"Add\"\r\n        title=\"Click to add to watch list\"\r\n        timeout={0}\r\n        onClick={this._handlerAdd}\r\n      />\r\n   ];\r\n    return {\r\n      groupOptions: store.getWatchGroups(),\r\n      listOptions: [],\r\n      validationMessages: []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  },\r\n  componetWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    if (actionType === actionCompleted && data.forActionType === forActionType){\r\n       if (this.state.validationMessages.length>0){\r\n         this.setState({ validationMessages:[] });\r\n       }\r\n       this.props.onClose();\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n       this.setState({ validationMessages:data.messages });\r\n    }\r\n  },\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if (nextProps !== this.props && nextProps.isShow !== this.props.isShow) {\r\n      const groups = nextProps.store.getWatchGroups();\r\n      if (groups !== this.state.groupOptions){\r\n        this.groupCaption = null;\r\n        this.listCaption = null;\r\n        this.setState({groupOptions:groups, listOptions:[]});\r\n      } else if (this.groupCaption){\r\n        const lists = nextProps.store.getWatchListsByGroup(this.groupCaption);\r\n        if (lists !== this.state.listOptions){\r\n          this.listCaption = null;\r\n          this.setState({listOptions:lists})\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (nextProps !== this.props && nextProps.isShow === this.props.isShow) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  _handlerSelectGroup(group){\r\n    if (group && group.caption){\r\n       //const {store} = this.props;\r\n       this.groupCaption = group.caption;\r\n       if (group.lists){\r\n         this.setState({listOptions : group.lists})\r\n       }  else {\r\n         this.setState({listOptions : []})\r\n       }\r\n    } else {\r\n      this.groupCaption = null;\r\n    }\r\n  },\r\n  _handlerSelectList(list){\r\n      if (list && list.caption){\r\n        this.listCaption = list.caption;\r\n      } else {\r\n        this.listCaption = null;\r\n      }\r\n  },\r\n  _handlerAdd(){\r\n    const validationMessages = this._getValidationMessages();\r\n    if (validationMessages.isValid){\r\n      //onClose\r\n      const { data } = this.props\r\n          , { caption, config } = data\r\n          , { groupCaption, listCaption } = this;\r\n\r\n      WatchActions.addItem({ caption, groupCaption, listCaption, config });\r\n    } else {\r\n      this._updateValidationMessages(validationMessages);\r\n    }\r\n  },\r\n  _getValidationMessages(){\r\n    const msg = [];\r\n    if (!this.groupCaption){ msg.push(Msg.NOT_SELECTED('Group'));}\r\n    if (!this.listCaption) { msg.push(Msg.NOT_SELECTED('List'));}\r\n    msg.isValid = (msg.length === 0) ? true : false;\r\n    return msg;\r\n  },\r\n\r\n  _handlerClose(){\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({validationMessages: []});\r\n    }\r\n    this.props.onClose();\r\n  },\r\n\r\n  render(){\r\n    const { isShow, data } = this.props\r\n        , { caption, config={} } = data\r\n        , { descr } = config\r\n        , { groupOptions, listOptions, validationMessages } = this.state;\r\n\r\n    return (\r\n      <ModalDialog\r\n         caption=\"Add To Watch List\"\r\n         isShow={isShow}\r\n         commandButtons={this._commandButtons}\r\n         onClose={this._handlerClose}\r\n      >\r\n        <div style={styles.rowDiv} key=\"1\">\r\n          <span style={styles.labelSpan}>\r\n            Group:\r\n          </span>\r\n          <InputSelect\r\n             width=\"250\"\r\n             options={groupOptions}\r\n             onSelect={this._handlerSelectGroup}\r\n           />\r\n        </div>\r\n        <div style={styles.rowDiv} key=\"2\">\r\n          <span style={styles.labelSpan}>\r\n            List:\r\n          </span>\r\n          <InputSelect\r\n             width=\"250\"\r\n             options={listOptions}\r\n             onSelect={this._handlerSelectList}\r\n           />\r\n        </div>\r\n        <div style={{...styles.rowDiv, ...S.LH}} key=\"3\">\r\n          <span style={styles.labelSpan}>\r\n            Item:\r\n          </span>\r\n          <span style={S.BOLD}>\r\n             {caption}\r\n          </span>\r\n        </div>\r\n        <div style={{...styles.rowDiv, ...S.LH}} key=\"4\">\r\n          <span style={styles.labelSpan}>\r\n             Descr:\r\n          </span>\r\n          <span style={S.DESCR}>\r\n             {descr}\r\n          </span>\r\n        </div>\r\n        <ValidationMessagesFragment\r\n           key=\"5\"\r\n           validationMessages={validationMessages}\r\n         />\r\n      </ModalDialog>\r\n    );\r\n  }\r\n});\r\n\r\nexport default AddToWatchDialog\r\n"]}