{"version":3,"sources":["../../../src/components/browser-watch/ListEditPane.jsx"],"names":["Styles","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ListEditPane","createClass","displayName","propTypes","store","PropTypes","object","actionCompleted","string","forActionType","onRename","func","onClose","getInitialState","props","groupOptions","getWatchGroups","listOptions","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componentWillUnmount","actionType","data","actionFailed","_handlerClear","setState","messages","isFullClear","inputText","setValue","state","length","_handlerRename","selectGroupList","getValue","captionGroup","captionList","captionListTo","captionListFrom","msgOnIsEmptyName","msgOnNotSelect","msg","push","render","c"],"mappings":"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","file":"ListEditPane.js","sourcesContent":["import React from 'react';\r\n\r\nimport FragmentSelectGroupList from './FragmentSelectGroupList';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nconst Styles = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nconst ListEditPane = React.createClass({\r\n  displayName : 'ListEditPane',\r\n  propTypes : {\r\n    store : React.PropTypes.object,\r\n    actionCompleted : React.PropTypes.string,\r\n    forActionType : React.PropTypes.string,\r\n    onRename : React.PropTypes.func,\r\n    onClose : React.PropTypes.func\r\n  },\r\n\r\n  getInitialState(){\r\n    const {store} = this.props;\r\n    return {\r\n      groupOptions : store.getWatchGroups(),\r\n      listOptions : [],\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n        }\r\n        this.setState({groupOptions : store.getWatchGroups()});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages:data.messages});\r\n    }\r\n  },\r\n\r\n  _handlerClear(isFullClear){\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({validationMessages:[]})\r\n     }\r\n  },\r\n\r\n\r\n  _handlerRename(){\r\n    const {captionGroup, captionList} = this.selectGroupList.getValue()\r\n        , captionListTo = this.inputText.getValue();\r\n    if (captionGroup && captionList && captionListTo){\r\n      this.props.onRename({\r\n        captionGroup : captionGroup,\r\n        captionListFrom : captionList,\r\n        captionListTo : captionListTo\r\n      })\r\n    } else {\r\n      const {msgOnIsEmptyName, msgOnNotSelect} = this.props\r\n          , msg = [];\r\n      if (!captionGroup) { msg.push(msgOnNotSelect('Group')); }\r\n      if (!captionList)  { msg.push(msgOnNotSelect('List From')); }\r\n      if (!captionListTo){ msg.push(msgOnIsEmptyName('List To')); }\r\n      this.setState({validationMessages:msg})\r\n    }\r\n  },\r\n\r\n  render(){\r\n    const {store, onClose} = this.props\r\n          //listOptions\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n         <FragmentSelectGroupList\r\n           ref={c => this.selectGroupList = c}\r\n           store={store}\r\n           groupCaption={'In Group:'}\r\n           groupOptions={groupOptions}\r\n           listCaption={'List From:'}\r\n         />\r\n         <RowInputText\r\n            ref={c => this.inputText = c}\r\n            caption={'List To:'}\r\n         />\r\n         <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n         <div style={Styles.COMMAND_DIV}>\r\n            <ToolBarButton\r\n               type=\"TypeC\"\r\n               caption=\"Rename\"\r\n               onClick={this._handlerRename}\r\n            />\r\n            <ToolBarButton\r\n               type=\"TypeC\"\r\n               caption=\"Clear\"\r\n               onClick={this._handlerClear}\r\n            />\r\n            <ToolBarButton\r\n               type=\"TypeC\"\r\n               caption=\"Close\"\r\n               onClick={onClose}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nexport default ListEditPane\r\n"]}