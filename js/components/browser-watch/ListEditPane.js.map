{"version":3,"sources":["../../../src/components/browser-watch/ListEditPane.jsx"],"names":["S","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ListEditPane","props","store","state","groupOptions","getWatchGroups","listOptions","validationMessages","unsubscribe","listen","_onStore","onClose","_refGroupList","_refInputText","_handlerRename","_handlerClear","Component","actionType","data","actionCompleted","actionFailed","forActionType","setState","messages","isFullClear","inputText","setValue","length","selectGroupList","getValue","captionGroup","captionList","captionListTo","onRename","captionListFrom","msgOnIsEmptyName","msgOnNotSelect","msg","push","c"],"mappings":"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","file":"ListEditPane.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport FragmentSelectGroupList from './FragmentSelectGroupList';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\n\r\nconst S = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n};\r\n\r\nclass ListEditPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    onRename : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    const {store} = props;\r\n    this.state = {\r\n      groupOptions: store.getWatchGroups(),\r\n      listOptions: [],\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props\r\n      .store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n        }\r\n        this.setState({ groupOptions: store.getWatchGroups() });\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({ validationMessages: data.messages });\r\n    }\r\n  }\r\n\r\n  _handlerClear = (isFullClear) => {\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages: [] })\r\n     }\r\n  }\r\n\r\n  _handlerRename = () => {\r\n    const {captionGroup, captionList} = this.selectGroupList.getValue()\r\n        , captionListTo = this.inputText.getValue();\r\n    if (captionGroup && captionList && captionListTo){\r\n      this.props.onRename({\r\n        captionGroup: captionGroup,\r\n        captionListFrom: captionList,\r\n        captionListTo: captionListTo\r\n      })\r\n    } else {\r\n      const {msgOnIsEmptyName, msgOnNotSelect} = this.props\r\n          , msg = [];\r\n      if (!captionGroup) { msg.push(msgOnNotSelect('Group')); }\r\n      if (!captionList)  { msg.push(msgOnNotSelect('List From')); }\r\n      if (!captionListTo){ msg.push(msgOnIsEmptyName('List To')); }\r\n      this.setState({ validationMessages: msg })\r\n    }\r\n  }\r\n\r\n  _refGroupList = c => this.selectGroupList = c\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {store, onClose} = this.props\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n         <FragmentSelectGroupList\r\n           ref={this._refGroupList}\r\n           store={store}\r\n           groupCaption=\"In Group\"\r\n           groupOptions={groupOptions}\r\n           listCaption=\"List From\"\r\n         />\r\n         <RowInputText\r\n            ref={this._refInputText}\r\n            caption=\"List To\"\r\n         />\r\n         <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n         <div style={S.COMMAND_DIV}>\r\n            <FlatButton\r\n               isPrimary={true}\r\n               caption=\"Rename\"\r\n               timeout={0}\r\n               onClick={this._handlerRename}\r\n            />\r\n            <FlatButton\r\n               caption=\"Clear\"\r\n               timeout={0}\r\n               onClick={this._handlerClear}\r\n            />\r\n            <FlatButton\r\n               caption=\"Close\"\r\n               timeout={0}\r\n               onClick={onClose}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListEditPane\r\n"]}