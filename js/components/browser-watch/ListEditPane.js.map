{"version":3,"sources":["../../../src/components/browser-watch/ListEditPane.jsx"],"names":["S","COMMAND_DIV","cursor","marginTop","marginBottom","marginRight","ListEditPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","_handlerClear","setState","groupOptions","getWatchGroups","validationMessages","messages","isFullClear","inputText","setValue","state","length","_handlerRename","selectGroupList","getValue","captionGroup","captionList","captionListTo","onRename","captionListFrom","msgOnIsEmptyName","msgOnNotSelect","msg","push","_refGroupList","c","_refInputText","listOptions","componentDidMount","unsubscribe","listen","componentWillUnmount","render","onClose","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport FragmentSelectGroupList from './FragmentSelectGroupList';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhn-moleculs/ValidationMessagesFragment';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\n\r\nconst S = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n};\r\n\r\nclass ListEditPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    onRename : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    const {store} = props;\r\n    this.state = {\r\n      groupOptions: store.getWatchGroups(),\r\n      listOptions: [],\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props\r\n      .store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n        }\r\n        this.setState({ groupOptions: store.getWatchGroups() });\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({ validationMessages: data.messages });\r\n    }\r\n  }\r\n\r\n  _handlerClear = (isFullClear) => {\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages: [] })\r\n     }\r\n  }\r\n\r\n  _handlerRename = () => {\r\n    const {captionGroup, captionList} = this.selectGroupList.getValue()\r\n        , captionListTo = this.inputText.getValue();\r\n    if (captionGroup && captionList && captionListTo){\r\n      this.props.onRename({\r\n        captionGroup: captionGroup,\r\n        captionListFrom: captionList,\r\n        captionListTo: captionListTo\r\n      })\r\n    } else {\r\n      const {msgOnIsEmptyName, msgOnNotSelect} = this.props\r\n          , msg = [];\r\n      if (!captionGroup) { msg.push(msgOnNotSelect('Group')); }\r\n      if (!captionList)  { msg.push(msgOnNotSelect('List From')); }\r\n      if (!captionListTo){ msg.push(msgOnIsEmptyName('List To')); }\r\n      this.setState({ validationMessages: msg })\r\n    }\r\n  }\r\n\r\n  _refGroupList = c => this.selectGroupList = c\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {store, onClose} = this.props\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n         <FragmentSelectGroupList\r\n           ref={this._refGroupList}\r\n           store={store}\r\n           groupCaption=\"In Group\"\r\n           groupOptions={groupOptions}\r\n           listCaption=\"List From\"\r\n         />\r\n         <RowInputText\r\n            ref={this._refInputText}\r\n            caption=\"List To\"\r\n         />\r\n         <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n         <div style={S.COMMAND_DIV}>\r\n            <FlatButton\r\n               isPrimary={true}\r\n               caption=\"Rename\"\r\n               timeout={0}\r\n               onClick={this._handlerRename}\r\n            />\r\n            <FlatButton\r\n               caption=\"Clear\"\r\n               timeout={0}\r\n               onClick={this._handlerClear}\r\n            />\r\n            <FlatButton\r\n               caption=\"Close\"\r\n               timeout={0}\r\n               onClick={onClose}\r\n            />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListEditPane\r\n"],"file":"ListEditPane.js"}