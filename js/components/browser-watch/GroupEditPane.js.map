{"version":3,"sources":["../../../src/components/browser-watch/GroupEditPane.jsx"],"names":["Styles","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","GroupEditPane","displayName","getInitialState","store","props","captionFrom","groupOptions","getWatchGroups","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componentWillUnmount","actionType","data","actionCompleted","actionFailed","forActionType","_handlerClear","setState","messages","_handlerSelectGroup","item","caption","inputText","setValue","state","length","_handlerRename","captionTo","getValue","onRename","msg","push","msgOnNotSelect","msgOnIsEmptyName","render","onClose","c"],"mappings":"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","file":"GroupEditPane.js","sourcesContent":["import React from 'react';\r\nimport createReactClass from 'create-react-class'\r\n\r\n//import PropTypes from 'prop-types'\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nconst Styles = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nconst GroupEditPane = createReactClass({\r\n  displayName : 'GroupEditPane',\r\n  /*\r\n  propTypes : {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    actionFailed : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    msgOnIsEmptyName : PropTypes.func,\r\n    msgOnNotSelect : PropTypes.func,\r\n    onRename : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  getInitialState(){\r\n    const {store} = this.props;\r\n    this.captionFrom = null;\r\n    return {\r\n      groupOptions : store.getWatchGroups(),\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n      if (data.forActionType === forActionType){\r\n        this._handlerClear();\r\n      }\r\n      this.setState({groupOptions : store.getWatchGroups()});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages});\r\n    }\r\n  },\r\n\r\n  _handlerSelectGroup(item){\r\n     if (item && item.caption){\r\n       this.captionFrom = item.caption;\r\n     } else {\r\n       this.captionFrom = null;\r\n     }\r\n  },\r\n\r\n  _handlerClear(){\r\n    this.inputText.setValue('');\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({validationMessages:[]});\r\n    }\r\n  },\r\n  _handlerRename(){\r\n     const captionTo = this.inputText.getValue();\r\n     if (captionTo && this.captionFrom) {\r\n       this.props.onRename({captionFrom: this.captionFrom, captionTo});\r\n     } else {\r\n       const msg = [];\r\n       if (!this.captionFrom){\r\n         msg.push(this.props.msgOnNotSelect('Group From'));\r\n       }\r\n       if (!captionTo){\r\n         msg.push(this.props.msgOnIsEmptyName('Group To'));\r\n       }\r\n       this.setState({validationMessages:msg});\r\n     }\r\n  },\r\n\r\n  render(){\r\n    const { onClose } = this.props\r\n          //isUpdated\r\n        , { groupOptions, validationMessages} = this.state;\r\n\r\n    return (\r\n       <div>\r\n          <RowInputSelect\r\n             caption={'Group From:'}\r\n             options={groupOptions}\r\n             onSelect={this._handlerSelectGroup}\r\n          />\r\n         <RowInputText\r\n           ref={c => this.inputText = c}\r\n           caption={'Group To:'}\r\n         />\r\n         <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n         <div style={Styles.COMMAND_DIV}>\r\n           <ToolBarButton\r\n             type=\"TypeC\"\r\n             caption=\"Rename\"\r\n             onClick={this._handlerRename}\r\n           />\r\n           <ToolBarButton\r\n             type=\"TypeC\"\r\n             caption=\"Clear\"\r\n             onClick={this._handlerClear}\r\n           />\r\n          <ToolBarButton\r\n             type=\"TypeC\"\r\n             caption=\"Close\"\r\n             onClick={onClose}\r\n          />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n});\r\n\r\nexport default GroupEditPane\r\n"]}