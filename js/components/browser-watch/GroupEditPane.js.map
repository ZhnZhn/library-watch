{"version":3,"sources":["../../../src/components/browser-watch/GroupEditPane.jsx"],"names":["Styles","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","GroupEditPane","createClass","displayName","propTypes","store","PropTypes","object","actionCompleted","string","actionFailed","forActionType","msgOnIsEmptyName","func","msgOnNotSelect","onRename","onClose","getInitialState","props","captionFrom","groupOptions","getWatchGroups","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componentWillUnmount","actionType","data","_handlerClear","setState","messages","_handlerSelectGroup","item","caption","inputText","setValue","state","length","_handlerRename","captionTo","getValue","msg","push","render","c"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS;AACbC,eAAc;AACXC,YAAQ,SADG;AAEXC,WAAO,OAFI;AAGXC,eAAW,KAHA;AAIXC,kBAAc,MAJH;AAKXC,iBAAa;AALF;AADD,CAAf;;AAUA,IAAMC,gBAAgB,gBAAMC,WAAN,CAAkB;AACtCC,eAAc,eADwB;AAEtCC,aAAY;AACVC,WAAQ,gBAAMC,SAAN,CAAgBC,MADd;AAEVC,qBAAkB,gBAAMF,SAAN,CAAgBG,MAFxB;AAGVC,kBAAe,gBAAMJ,SAAN,CAAgBG,MAHrB;AAIVE,mBAAgB,gBAAML,SAAN,CAAgBG,MAJtB;AAKVG,sBAAmB,gBAAMN,SAAN,CAAgBO,IALzB;AAMVC,oBAAiB,gBAAMR,SAAN,CAAgBO,IANvB;AAOVE,cAAW,gBAAMT,SAAN,CAAgBO,IAPjB;AAQVG,aAAU,gBAAMV,SAAN,CAAgBO;AARhB,GAF0B;AAYtCI,iBAZsC,6BAYrB;AAAA,QACRZ,KADQ,GACC,KAAKa,KADN,CACRb,KADQ;;AAEf,SAAKc,WAAL,GAAmB,IAAnB;AACA,WAAO;AACLC,oBAAef,MAAMgB,cAAN,EADV;AAELC,0BAAqB;AAFhB,KAAP;AAID,GAnBqC;AAqBtCC,mBArBsC,+BAqBnB;AACjB,SAAKC,WAAL,GAAmB,KAAKN,KAAL,CAAWb,KAAX,CAAiBoB,MAAjB,CAAwB,KAAKC,QAA7B,CAAnB;AACD,GAvBqC;AAwBtCC,sBAxBsC,kCAwBhB;AACpB,SAAKH,WAAL;AACD,GA1BqC;AA2BtCE,UA3BsC,oBA2B7BE,UA3B6B,EA2BjBC,IA3BiB,EA2BZ;AAAA,iBACsC,KAAKX,KAD3C;AAAA,QACjBV,eADiB,UACjBA,eADiB;AAAA,QACAE,YADA,UACAA,YADA;AAAA,QACcC,aADd,UACcA,aADd;AAAA,QAC6BN,KAD7B,UAC6BA,KAD7B;;AAExB,QAAIuB,eAAepB,eAAnB,EAAmC;AACjC,UAAIqB,KAAKlB,aAAL,KAAuBA,aAA3B,EAAyC;AACvC,aAAKmB,aAAL;AACD;AACD,WAAKC,QAAL,CAAc,EAACX,cAAef,MAAMgB,cAAN,EAAhB,EAAd;AACD,KALD,MAKO,IAAIO,eAAelB,YAAf,IAA+BmB,KAAKlB,aAAL,KAAuBA,aAA1D,EAAwE;AAC7E,WAAKoB,QAAL,CAAc,EAACT,oBAAoBO,KAAKG,QAA1B,EAAd;AACD;AACF,GArCqC;AAuCtCC,qBAvCsC,+BAuClBC,IAvCkB,EAuCb;AACtB,QAAIA,QAAQA,KAAKC,OAAjB,EAAyB;AACvB,WAAKhB,WAAL,GAAmBe,KAAKC,OAAxB;AACD,KAFD,MAEO;AACL,WAAKhB,WAAL,GAAmB,IAAnB;AACD;AACH,GA7CqC;AA+CtCW,eA/CsC,2BA+CvB;AACb,SAAKM,SAAL,CAAeC,QAAf,CAAwB,EAAxB;AACA,QAAI,KAAKC,KAAL,CAAWhB,kBAAX,CAA8BiB,MAA9B,GAAqC,CAAzC,EAA2C;AACzC,WAAKR,QAAL,CAAc,EAACT,oBAAmB,EAApB,EAAd;AACD;AACF,GApDqC;AAqDtCkB,gBArDsC,4BAqDtB;AACb,QAAMC,YAAY,KAAKL,SAAL,CAAeM,QAAf,EAAlB;AACA,QAAID,aAAa,KAAKtB,WAAtB,EAAmC;AACjC,WAAKD,KAAL,CAAWH,QAAX,CAAoB,EAACI,aAAa,KAAKA,WAAnB,EAAgCsB,oBAAhC,EAApB;AACD,KAFD,MAEO;AACL,UAAME,MAAM,EAAZ;AACA,UAAI,CAAC,KAAKxB,WAAV,EAAsB;AACpBwB,YAAIC,IAAJ,CAAS,KAAK1B,KAAL,CAAWJ,cAAX,CAA0B,YAA1B,CAAT;AACD;AACD,UAAI,CAAC2B,SAAL,EAAe;AACbE,YAAIC,IAAJ,CAAS,KAAK1B,KAAL,CAAWN,gBAAX,CAA4B,UAA5B,CAAT;AACD;AACD,WAAKmB,QAAL,CAAc,EAACT,oBAAmBqB,GAApB,EAAd;AACD;AACH,GAnEqC;AAqEtCE,QArEsC,oBAqE9B;AAAA;;AACA,QAAE7B,OAAF,GAAc,KAAKE,KAAnB,CAAEF,OAAF;AAAA,iBAEsC,KAAKsB,KAF3C;AAAA,QAEElB,YAFF,UAEEA,YAFF;AAAA,QAEgBE,kBAFhB,UAEgBA,kBAFhB;AACA;;;AAGN,WACG;AAAA;AAAA;AACG;AACG,iBAAS,aADZ;AAEG,iBAASF,YAFZ;AAGG,kBAAU,KAAKa;AAHlB,QADH;AAME;AACE,aAAK;AAAA,iBAAK,MAAKG,SAAL,GAAiBU,CAAtB;AAAA,SADP;AAEE,iBAAS;AAFX,QANF;AAUE;AACE,4BAAoBxB;AADtB,QAVF;AAaE;AAAA;AAAA,UAAK,OAAO5B,OAAOC,WAAnB;AACE;AACE,gBAAK,OADP;AAEE,mBAAQ,QAFV;AAGE,mBAAS,KAAK6C;AAHhB,UADF;AAME;AACE,gBAAK,OADP;AAEE,mBAAQ,OAFV;AAGE,mBAAS,KAAKV;AAHhB,UANF;AAWC;AACG,gBAAK,OADR;AAEG,mBAAQ,OAFX;AAGG,mBAASd;AAHZ;AAXD;AAbF,KADH;AAiCD;AA3GqC,CAAlB,CAAtB;;kBA8Gef,a","file":"GroupEditPane.js","sourcesContent":["import React from 'react';\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nconst Styles = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nconst GroupEditPane = React.createClass({\r\n  displayName : 'GroupEditPane',\r\n  propTypes : {\r\n    store : React.PropTypes.object,\r\n    actionCompleted : React.PropTypes.string,\r\n    actionFailed : React.PropTypes.string,\r\n    forActionType : React.PropTypes.string,\r\n    msgOnIsEmptyName : React.PropTypes.func,\r\n    msgOnNotSelect : React.PropTypes.func,\r\n    onRename : React.PropTypes.func,\r\n    onClose : React.PropTypes.func\r\n  },\r\n  getInitialState(){\r\n    const {store} = this.props;\r\n    this.captionFrom = null;\r\n    return {\r\n      groupOptions : store.getWatchGroups(),\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n      if (data.forActionType === forActionType){\r\n        this._handlerClear();\r\n      }\r\n      this.setState({groupOptions : store.getWatchGroups()});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages});\r\n    }\r\n  },\r\n\r\n  _handlerSelectGroup(item){\r\n     if (item && item.caption){\r\n       this.captionFrom = item.caption;\r\n     } else {\r\n       this.captionFrom = null;\r\n     }\r\n  },\r\n\r\n  _handlerClear(){\r\n    this.inputText.setValue('');\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({validationMessages:[]});\r\n    }\r\n  },\r\n  _handlerRename(){\r\n     const captionTo = this.inputText.getValue();\r\n     if (captionTo && this.captionFrom) {\r\n       this.props.onRename({captionFrom: this.captionFrom, captionTo});\r\n     } else {\r\n       const msg = [];\r\n       if (!this.captionFrom){\r\n         msg.push(this.props.msgOnNotSelect('Group From'));\r\n       }\r\n       if (!captionTo){\r\n         msg.push(this.props.msgOnIsEmptyName('Group To'));\r\n       }\r\n       this.setState({validationMessages:msg});\r\n     }\r\n  },\r\n\r\n  render(){\r\n    const { onClose } = this.props\r\n          //isUpdated\r\n        , { groupOptions, validationMessages} = this.state;\r\n\r\n    return (\r\n       <div>\r\n          <RowInputSelect\r\n             caption={'Group From:'}\r\n             options={groupOptions}\r\n             onSelect={this._handlerSelectGroup}\r\n          />\r\n         <RowInputText\r\n           ref={c => this.inputText = c}\r\n           caption={'Group To:'}\r\n         />\r\n         <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n         <div style={Styles.COMMAND_DIV}>\r\n           <ToolBarButton\r\n             type=\"TypeC\"\r\n             caption=\"Rename\"\r\n             onClick={this._handlerRename}\r\n           />\r\n           <ToolBarButton\r\n             type=\"TypeC\"\r\n             caption=\"Clear\"\r\n             onClick={this._handlerClear}\r\n           />\r\n          <ToolBarButton\r\n             type=\"TypeC\"\r\n             caption=\"Close\"\r\n             onClick={onClose}\r\n          />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n});\r\n\r\nexport default GroupEditPane\r\n"]}