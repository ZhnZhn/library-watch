{"version":3,"sources":["../../../src/components/browser-watch/GroupEditPane.jsx"],"names":["S","COMMAND_DIV","cursor","marginTop","marginBottom","marginRight","GroupEditPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","_handlerClear","setState","groupOptions","getWatchGroups","validationMessages","messages","_handlerSelectGroup","item","caption","captionFrom","inputText","setValue","state","length","_handlerRename","captionTo","getValue","onRename","msg","push","msgOnNotSelect","msgOnIsEmptyName","_refInputText","c","componentDidMount","unsubscribe","listen","componentWillUnmount","render","onClose","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhn-moleculs/ValidationMessagesFragment';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\n\r\nconst S = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n};\r\n\r\nclass GroupEditPane extends Component {\r\n  /*\r\n  statis propTypes = {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    actionFailed : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    msgOnIsEmptyName : PropTypes.func,\r\n    msgOnNotSelect : PropTypes.func,\r\n    onRename : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    const { store } = props;\r\n    this.captionFrom = null;\r\n    this.state = {\r\n      groupOptions: store.getWatchGroups(),\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props\r\n      .store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n      if (data.forActionType === forActionType){\r\n        this._handlerClear();\r\n      }\r\n      this.setState({groupOptions : store.getWatchGroups()});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages});\r\n    }\r\n  }\r\n\r\n  _handlerSelectGroup = (item) => {\r\n     if (item && item.caption){\r\n       this.captionFrom = item.caption;\r\n     } else {\r\n       this.captionFrom = null;\r\n     }\r\n  }\r\n\r\n  _handlerClear = () => {\r\n    this.inputText.setValue('');\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({validationMessages:[]});\r\n    }\r\n  }\r\n  _handlerRename = () => {\r\n     const captionTo = this.inputText.getValue();\r\n     if (captionTo && this.captionFrom) {\r\n       this.props.onRename({captionFrom: this.captionFrom, captionTo});\r\n     } else {\r\n       const msg = [];\r\n       if (!this.captionFrom){\r\n         msg.push(this.props.msgOnNotSelect('Group From'));\r\n       }\r\n       if (!captionTo){\r\n         msg.push(this.props.msgOnIsEmptyName('Group To'));\r\n       }\r\n       this.setState({validationMessages: msg});\r\n     }\r\n  }\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const { onClose } = this.props\r\n        , { groupOptions, validationMessages} = this.state;\r\n\r\n    return (\r\n       <div>\r\n          <RowInputSelect\r\n             caption=\"Group From\"\r\n             options={groupOptions}\r\n             onSelect={this._handlerSelectGroup}\r\n          />\r\n         <RowInputText\r\n           ref={this._refInputText}\r\n           caption=\"Group To\"\r\n         />\r\n         <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n         <div style={S.COMMAND_DIV}>\r\n           <FlatButton\r\n             isPrimary={true}\r\n             caption=\"Rename\"\r\n             timeout={0}\r\n             onClick={this._handlerRename}\r\n           />\r\n           <FlatButton\r\n             caption=\"Clear\"\r\n             timeout={0}\r\n             onClick={this._handlerClear}\r\n           />\r\n          <FlatButton\r\n             caption=\"Close\"\r\n             timeout={0}\r\n             onClick={onClose}\r\n          />\r\n         </div>\r\n       </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GroupEditPane\r\n"],"file":"GroupEditPane.js"}