{"version":3,"sources":["../../../src/components/browser-watch/ListCreatePane.jsx"],"names":["S","COMMAND_DIV","cursor","marginTop","marginBottom","marginRight","ListCreatePane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","isUpdateGroup","_handlerClear","setState","groupOptions","getWatchGroups","validationMessages","messages","_handlerSelectGroup","item","caption","captionGroup","inputText","setValue","state","length","_handlerCreate","captionList","getValue","onCreate","msgOnNotSelect","msgOnIsEmptyName","msg","push","_refInputText","c","componentDidMount","unsubscribe","listen","componentWillUnmount","render","onClose","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhn-moleculs/ValidationMessagesFragment';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\n\r\nconst S = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nclass ListCreatePane extends Component {\r\n  /*\r\n  statis propTypes = {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    actionFailed : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    msgOnNotSelect : PropTypes.func,\r\n    msgOnIsEmptyName : PropTypes.func,\r\n    onCreate : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    const { store } = props;\r\n    this.captionGroup = null;\r\n    this.state = {\r\n      groupOptions: store.getWatchGroups(),\r\n      isUpdateGroup: false,\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props\r\n      .store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        let isUpdateGroup = true;\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n          isUpdateGroup = false;\r\n        }\r\n        this.setState({groupOptions : store.getWatchGroups(), isUpdateGroup});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages, isUpdateGroup:false})\r\n    }\r\n  }\r\n\r\n  _handlerSelectGroup = (item) => {\r\n    if (item && item.caption){\r\n      this.captionGroup = item.caption;\r\n    } else {\r\n      this.captionGroup = null;\r\n    }\r\n  }\r\n\r\n  _handlerClear = () => {\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({\r\n         validationMessages: [],\r\n         isUpdateGroup: false\r\n       });\r\n     }\r\n  }\r\n\r\n  _handlerCreate = () => {\r\n     const captionList = this.inputText.getValue();\r\n     if (this.captionGroup && captionList){\r\n       this.props.onCreate({\r\n          captionGroup: this.captionGroup,\r\n          captionList: captionList\r\n       });\r\n     } else {\r\n       const {msgOnNotSelect, msgOnIsEmptyName} = this.props\r\n           , msg = [];\r\n       if (!this.captionGroup) { msg.push(msgOnNotSelect('In Group')); }\r\n       if (!captionList)       { msg.push(msgOnIsEmptyName('List')); }\r\n       this.setState({\r\n         validationMessages: msg,\r\n         isUpdateGroup: false\r\n       });\r\n     }\r\n  }\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {onClose} = this.props\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n        <RowInputSelect\r\n           caption=\"In Group\"\r\n           options={groupOptions}\r\n           //isUpdateOptions={isUpdateGroup}\r\n           onSelect={this._handlerSelectGroup}\r\n        />\r\n        <RowInputText\r\n           ref={this._refInputText}\r\n           caption=\"List\"\r\n        />\r\n        <ValidationMessagesFragment\r\n          validationMessages={validationMessages}\r\n        />\r\n        <div style={S.COMMAND_DIV}>\r\n         <FlatButton\r\n            isPrimary={true}\r\n            caption=\"Create\"\r\n            timeout={0}\r\n            onClick={this._handlerCreate}\r\n         />\r\n         <FlatButton\r\n            caption=\"Clear\"\r\n            timeout={0}\r\n            onClick={this._handlerClear}\r\n         />\r\n         <FlatButton\r\n            caption=\"Close\"\r\n            timeout={0}\r\n            onClick={onClose}\r\n         />\r\n       </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ListCreatePane\r\n"],"file":"ListCreatePane.js"}