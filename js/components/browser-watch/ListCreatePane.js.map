{"version":3,"sources":["../../../src/components/browser-watch/ListCreatePane.jsx"],"names":["Styles","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ListCreatePane","createClass","displayName","propTypes","store","PropTypes","object","actionCompleted","string","actionFailed","forActionType","msgOnNotSelect","func","msgOnIsEmptyName","onCreate","onClose","getInitialState","props","captionGroup","groupOptions","getWatchGroups","isUpdateGroup","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componentWillUnmount","actionType","data","_handlerClear","setState","messages","_handlerSelectGroup","item","caption","inputText","setValue","state","length","_handlerCreate","captionList","getValue","msg","push","render","c"],"mappings":"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","file":"ListCreatePane.js","sourcesContent":["import React from 'react';\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nconst Styles = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nconst ListCreatePane = React.createClass({\r\n  displayName : 'ListCreatePane',\r\n  propTypes : {\r\n    store : React.PropTypes.object,\r\n    actionCompleted : React.PropTypes.string,\r\n    actionFailed : React.PropTypes.string,\r\n    forActionType : React.PropTypes.string,\r\n    msgOnNotSelect : React.PropTypes.func,\r\n    msgOnIsEmptyName : React.PropTypes.func,\r\n    onCreate : React.PropTypes.func,\r\n    onClose : React.PropTypes.func\r\n  },\r\n\r\n  getInitialState(){\r\n    const {store} = this.props;\r\n    this.captionGroup = null;\r\n    return {\r\n      groupOptions : store.getWatchGroups(),\r\n      isUpdateGroup : false,\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        let isUpdateGroup = true;\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n          isUpdateGroup = false;\r\n        }\r\n        this.setState({groupOptions : store.getWatchGroups(), isUpdateGroup});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages, isUpdateGroup:false})\r\n    }\r\n  },\r\n\r\n  _handlerSelectGroup(item){\r\n    if (item && item.caption){\r\n      this.captionGroup = item.caption;\r\n    } else {\r\n      this.captionGroup = null;\r\n    }\r\n  },\r\n\r\n  _handlerClear(){\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({validationMessages: [], isUpdateGroup:false});\r\n     }\r\n  },\r\n\r\n  _handlerCreate(){\r\n     const captionList = this.inputText.getValue();\r\n     if (this.captionGroup && captionList){\r\n       this.props.onCreate({\r\n          captionGroup : this.captionGroup,\r\n          captionList : captionList\r\n       });\r\n     } else {\r\n       const {msgOnNotSelect, msgOnIsEmptyName} = this.props\r\n           , msg = [];\r\n       if (!this.captionGroup) { msg.push(msgOnNotSelect('In Group')); }\r\n       if (!captionList)       { msg.push(msgOnIsEmptyName('List')); }\r\n       this.setState({validationMessages:msg, isUpdateGroup:false});\r\n     }\r\n  },\r\n\r\n  render(){\r\n    const {onClose} = this.props\r\n          //isUpdateGroup\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n        <RowInputSelect\r\n           caption={'In Group:'}\r\n           options={groupOptions}\r\n           //isUpdateOptions={isUpdateGroup}\r\n           onSelect={this._handlerSelectGroup}\r\n        />\r\n        <RowInputText\r\n           ref={c => this.inputText = c}\r\n           caption={'List:'}\r\n        />\r\n        <ValidationMessagesFragment\r\n          validationMessages={validationMessages}\r\n        />\r\n        <div style={Styles.COMMAND_DIV}>\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Create\"\r\n            onClick={this._handlerCreate}\r\n         />\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Clear\"\r\n            onClick={this._handlerClear}\r\n         />\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Close\"\r\n            onClick={onClose}\r\n         />\r\n       </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n});\r\n\r\nexport default ListCreatePane\r\n"]}