{"version":3,"sources":["../../../src/components/browser-watch/ListCreatePane.jsx"],"names":["Styles","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ListCreatePane","displayName","getInitialState","store","props","captionGroup","groupOptions","getWatchGroups","isUpdateGroup","validationMessages","componentDidMount","unsubscribe","listen","_onStore","componentWillUnmount","actionType","data","actionCompleted","actionFailed","forActionType","_handlerClear","setState","messages","_handlerSelectGroup","item","caption","inputText","setValue","state","length","_handlerCreate","captionList","getValue","onCreate","msgOnNotSelect","msgOnIsEmptyName","msg","push","render","onClose","c"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AALA;;AAOA,IAAMA,SAAS;AACbC,eAAc;AACXC,YAAQ,SADG;AAEXC,WAAO,OAFI;AAGXC,eAAW,KAHA;AAIXC,kBAAc,MAJH;AAKXC,iBAAa;AALF;AADD,CAAf;;AAUA,IAAMC,iBAAiB,gCAAiB;AACtCC,eAAc,gBADwB;AAEtC;;;;;;;;;;;;;AAaAC,iBAfsC,6BAerB;AAAA,QACRC,KADQ,GACC,KAAKC,KADN,CACRD,KADQ;;AAEf,SAAKE,YAAL,GAAoB,IAApB;AACA,WAAO;AACLC,oBAAeH,MAAMI,cAAN,EADV;AAELC,qBAAgB,KAFX;AAGLC,0BAAqB;AAHhB,KAAP;AAKD,GAvBqC;AAyBtCC,mBAzBsC,+BAyBnB;AACjB,SAAKC,WAAL,GAAmB,KAAKP,KAAL,CAAWD,KAAX,CAAiBS,MAAjB,CAAwB,KAAKC,QAA7B,CAAnB;AACD,GA3BqC;AA4BtCC,sBA5BsC,kCA4BhB;AACpB,SAAKH,WAAL;AACD,GA9BqC;AA+BtCE,UA/BsC,oBA+B7BE,UA/B6B,EA+BjBC,IA/BiB,EA+BZ;AAAA,iBACsC,KAAKZ,KAD3C;AAAA,QACjBa,eADiB,UACjBA,eADiB;AAAA,QACAC,YADA,UACAA,YADA;AAAA,QACcC,aADd,UACcA,aADd;AAAA,QAC6BhB,KAD7B,UAC6BA,KAD7B;;AAExB,QAAIY,eAAeE,eAAnB,EAAmC;AAC/B,UAAIT,gBAAgB,IAApB;AACA,UAAIQ,KAAKG,aAAL,KAAuBA,aAA3B,EAAyC;AACvC,aAAKC,aAAL;AACAZ,wBAAgB,KAAhB;AACD;AACD,WAAKa,QAAL,CAAc,EAACf,cAAeH,MAAMI,cAAN,EAAhB,EAAwCC,4BAAxC,EAAd;AACH,KAPD,MAOO,IAAIO,eAAeG,YAAf,IAA+BF,KAAKG,aAAL,KAAuBA,aAA1D,EAAwE;AAC7E,WAAKE,QAAL,CAAc,EAACZ,oBAAoBO,KAAKM,QAA1B,EAAoCd,eAAc,KAAlD,EAAd;AACD;AACF,GA3CqC;AA6CtCe,qBA7CsC,+BA6ClBC,IA7CkB,EA6Cb;AACvB,QAAIA,QAAQA,KAAKC,OAAjB,EAAyB;AACvB,WAAKpB,YAAL,GAAoBmB,KAAKC,OAAzB;AACD,KAFD,MAEO;AACL,WAAKpB,YAAL,GAAoB,IAApB;AACD;AACF,GAnDqC;AAqDtCe,eArDsC,2BAqDvB;AACZ,SAAKM,SAAL,CAAeC,QAAf,CAAwB,EAAxB;AACA,QAAI,KAAKC,KAAL,CAAWnB,kBAAX,CAA8BoB,MAA9B,GAAqC,CAAzC,EAA2C;AACzC,WAAKR,QAAL,CAAc,EAACZ,oBAAoB,EAArB,EAAyBD,eAAc,KAAvC,EAAd;AACD;AACH,GA1DqC;AA4DtCsB,gBA5DsC,4BA4DtB;AACb,QAAMC,cAAc,KAAKL,SAAL,CAAeM,QAAf,EAApB;AACA,QAAI,KAAK3B,YAAL,IAAqB0B,WAAzB,EAAqC;AACnC,WAAK3B,KAAL,CAAW6B,QAAX,CAAoB;AACjB5B,sBAAe,KAAKA,YADH;AAEjB0B,qBAAcA;AAFG,OAApB;AAID,KALD,MAKO;AAAA,oBACsC,KAAK3B,KAD3C;AAAA,UACE8B,cADF,WACEA,cADF;AAAA,UACkBC,gBADlB,WACkBA,gBADlB;AAAA,UAECC,GAFD,GAEO,EAFP;;AAGL,UAAI,CAAC,KAAK/B,YAAV,EAAwB;AAAE+B,YAAIC,IAAJ,CAASH,eAAe,UAAf,CAAT;AAAuC;AACjE,UAAI,CAACH,WAAL,EAAwB;AAAEK,YAAIC,IAAJ,CAASF,iBAAiB,MAAjB,CAAT;AAAqC;AAC/D,WAAKd,QAAL,CAAc,EAACZ,oBAAmB2B,GAApB,EAAyB5B,eAAc,KAAvC,EAAd;AACD;AACH,GA1EqC;AA4EtC8B,QA5EsC,oBA4E9B;AAAA;;AACA,QAACC,OAAD,GAAY,KAAKnC,KAAjB,CAACmC,OAAD;AAAA,iBAEqC,KAAKX,KAF1C;AAAA,QAECtB,YAFD,UAECA,YAFD;AAAA,QAEeG,kBAFf,UAEeA,kBAFf;AACA;;AAEN,WACE;AAAA;AAAA;AACE,oCAAC,wBAAD;AACG,iBAAS,WADZ;AAEG,iBAASH;AACT;AAHH,UAIG,UAAU,KAAKiB;AAJlB,QADF;AAOE,oCAAC,sBAAD;AACG,aAAK;AAAA,iBAAK,MAAKG,SAAL,GAAiBc,CAAtB;AAAA,SADR;AAEG,iBAAS;AAFZ,QAPF;AAWE,oCAAC,oCAAD;AACE,4BAAoB/B;AADtB,QAXF;AAcE;AAAA;AAAA,UAAK,OAAOhB,OAAOC,WAAnB;AACC,sCAAC,uBAAD;AACG,gBAAK,OADR;AAEG,mBAAQ,QAFX;AAGG,mBAAS,KAAKoC;AAHjB,UADD;AAMC,sCAAC,uBAAD;AACG,gBAAK,OADR;AAEG,mBAAQ,OAFX;AAGG,mBAAS,KAAKV;AAHjB,UAND;AAWC,sCAAC,uBAAD;AACG,gBAAK,OADR;AAEG,mBAAQ,OAFX;AAGG,mBAASmB;AAHZ;AAXD;AAdF,KADF;AAkCD;AAlHqC,CAAjB,CAAvB;;kBAsHevC,c","file":"ListCreatePane.js","sourcesContent":["import React from 'react';\r\nimport createReactClass from 'create-react-class'\r\n\r\n//import PropTypes from 'prop-types'\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nconst Styles = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nconst ListCreatePane = createReactClass({\r\n  displayName : 'ListCreatePane',\r\n  /*\r\n  propTypes : {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    actionFailed : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    msgOnNotSelect : PropTypes.func,\r\n    msgOnIsEmptyName : PropTypes.func,\r\n    onCreate : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n\r\n  getInitialState(){\r\n    const {store} = this.props;\r\n    this.captionGroup = null;\r\n    return {\r\n      groupOptions : store.getWatchGroups(),\r\n      isUpdateGroup : false,\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore)\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  },\r\n  _onStore(actionType, data){\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        let isUpdateGroup = true;\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n          isUpdateGroup = false;\r\n        }\r\n        this.setState({groupOptions : store.getWatchGroups(), isUpdateGroup});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages, isUpdateGroup:false})\r\n    }\r\n  },\r\n\r\n  _handlerSelectGroup(item){\r\n    if (item && item.caption){\r\n      this.captionGroup = item.caption;\r\n    } else {\r\n      this.captionGroup = null;\r\n    }\r\n  },\r\n\r\n  _handlerClear(){\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({validationMessages: [], isUpdateGroup:false});\r\n     }\r\n  },\r\n\r\n  _handlerCreate(){\r\n     const captionList = this.inputText.getValue();\r\n     if (this.captionGroup && captionList){\r\n       this.props.onCreate({\r\n          captionGroup : this.captionGroup,\r\n          captionList : captionList\r\n       });\r\n     } else {\r\n       const {msgOnNotSelect, msgOnIsEmptyName} = this.props\r\n           , msg = [];\r\n       if (!this.captionGroup) { msg.push(msgOnNotSelect('In Group')); }\r\n       if (!captionList)       { msg.push(msgOnIsEmptyName('List')); }\r\n       this.setState({validationMessages:msg, isUpdateGroup:false});\r\n     }\r\n  },\r\n\r\n  render(){\r\n    const {onClose} = this.props\r\n          //isUpdateGroup\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n        <RowInputSelect\r\n           caption={'In Group:'}\r\n           options={groupOptions}\r\n           //isUpdateOptions={isUpdateGroup}\r\n           onSelect={this._handlerSelectGroup}\r\n        />\r\n        <RowInputText\r\n           ref={c => this.inputText = c}\r\n           caption={'List:'}\r\n        />\r\n        <ValidationMessagesFragment\r\n          validationMessages={validationMessages}\r\n        />\r\n        <div style={Styles.COMMAND_DIV}>\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Create\"\r\n            onClick={this._handlerCreate}\r\n         />\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Clear\"\r\n            onClick={this._handlerClear}\r\n         />\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Close\"\r\n            onClick={onClose}\r\n         />\r\n       </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n});\r\n\r\nexport default ListCreatePane\r\n"]}