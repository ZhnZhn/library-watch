{"version":3,"sources":["../../../src/components/browser-watch/ListCreatePane.jsx"],"names":["S","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ListCreatePane","props","store","captionGroup","state","groupOptions","getWatchGroups","isUpdateGroup","validationMessages","unsubscribe","listen","_onStore","onClose","_handlerSelectGroup","_refInputText","_handlerCreate","_handlerClear","Component","actionType","data","actionCompleted","actionFailed","forActionType","setState","messages","item","caption","inputText","setValue","length","captionList","getValue","onCreate","msgOnNotSelect","msgOnIsEmptyName","msg","push","c"],"mappings":"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","file":"ListCreatePane.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport RowInputSelect from './RowInputSelect';\r\nimport RowInputText from './RowInputText';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\n\r\nconst S = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nclass ListCreatePane extends Component {\r\n  /*\r\n  statis propTypes = {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    actionFailed : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    msgOnNotSelect : PropTypes.func,\r\n    msgOnIsEmptyName : PropTypes.func,\r\n    onCreate : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  constructor(props){\r\n    super(props)\r\n    const { store } = props;\r\n    this.captionGroup = null;\r\n    this.state = {\r\n      groupOptions: store.getWatchGroups(),\r\n      isUpdateGroup: false,\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props\r\n      .store.listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const {actionCompleted, actionFailed, forActionType, store} = this.props;\r\n    if (actionType === actionCompleted){\r\n        let isUpdateGroup = true;\r\n        if (data.forActionType === forActionType){\r\n          this._handlerClear();\r\n          isUpdateGroup = false;\r\n        }\r\n        this.setState({groupOptions : store.getWatchGroups(), isUpdateGroup});\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({validationMessages: data.messages, isUpdateGroup:false})\r\n    }\r\n  }\r\n\r\n  _handlerSelectGroup = (item) => {\r\n    if (item && item.caption){\r\n      this.captionGroup = item.caption;\r\n    } else {\r\n      this.captionGroup = null;\r\n    }\r\n  }\r\n\r\n  _handlerClear = () => {\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({\r\n         validationMessages: [],\r\n         isUpdateGroup: false\r\n       });\r\n     }\r\n  }\r\n\r\n  _handlerCreate = () => {\r\n     const captionList = this.inputText.getValue();\r\n     if (this.captionGroup && captionList){\r\n       this.props.onCreate({\r\n          captionGroup: this.captionGroup,\r\n          captionList: captionList\r\n       });\r\n     } else {\r\n       const {msgOnNotSelect, msgOnIsEmptyName} = this.props\r\n           , msg = [];\r\n       if (!this.captionGroup) { msg.push(msgOnNotSelect('In Group')); }\r\n       if (!captionList)       { msg.push(msgOnIsEmptyName('List')); }\r\n       this.setState({\r\n         validationMessages: msg,\r\n         isUpdateGroup: false\r\n       });\r\n     }\r\n  }\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {onClose} = this.props\r\n        , {groupOptions, validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n        <RowInputSelect\r\n           caption=\"In Group\"\r\n           options={groupOptions}\r\n           //isUpdateOptions={isUpdateGroup}\r\n           onSelect={this._handlerSelectGroup}\r\n        />\r\n        <RowInputText\r\n           ref={this._refInputText}\r\n           caption=\"List\"\r\n        />\r\n        <ValidationMessagesFragment\r\n          validationMessages={validationMessages}\r\n        />\r\n        <div style={S.COMMAND_DIV}>\r\n         <FlatButton\r\n            isPrimary={true}\r\n            caption=\"Create\"\r\n            timeout={0}\r\n            onClick={this._handlerCreate}\r\n         />\r\n         <FlatButton\r\n            caption=\"Clear\"\r\n            timeout={0}\r\n            onClick={this._handlerClear}\r\n         />\r\n         <FlatButton\r\n            caption=\"Close\"\r\n            timeout={0}\r\n            onClick={onClose}\r\n         />\r\n       </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ListCreatePane\r\n"]}