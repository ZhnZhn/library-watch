{"version":3,"sources":["../../../src/components/browser-watch/GroupAddPane.jsx"],"names":["S","COMMAND_DIV","cursor","marginTop","marginBottom","marginRight","GroupAddPane","state","validationMessages","_onStore","actionType","data","props","actionCompleted","actionFailed","forActionType","_handlerClear","setState","messages","inputText","setValue","length","_handlerCreate","caption","getValue","onCreate","msgOnIsEmptyName","_refInputText","c","componentDidMount","unsubscribe","store","listen","componentWillUnmount","render","onClose","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport RowInputText from './RowInputText';\r\nimport FlatButton from '../zhn-m/FlatButton'\r\nimport ValidationMessagesFragment from '../zhn-moleculs/ValidationMessagesFragment';\r\n\r\nconst S = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n};\r\n\r\nclass GroupAddPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store : PropTypes.object,\r\n    actionCompleted : PropTypes.string,\r\n    actionFailed : PropTypes.string,\r\n    forActionType : PropTypes.string,\r\n    msgOnIsEmptyName : PropTypes.func,\r\n    onCreate : PropTypes.func,\r\n    onClose : PropTypes.func\r\n  },\r\n  */\r\n  state = {\r\n    validationMessages: []\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props\r\n      .store.listen(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const {actionCompleted, actionFailed, forActionType} = this.props;\r\n    if (actionType === actionCompleted && data.forActionType === forActionType){\r\n       this._handlerClear();\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n       this.setState({validationMessages: data.messages});\r\n    }\r\n  }\r\n\r\n  _handlerClear = () => {\r\n    this.inputText.setValue('');\r\n    if (this.state.validationMessages.length>0){\r\n       this.setState({validationMessages: []});\r\n    }\r\n  }\r\n\r\n  _handlerCreate = () => {\r\n     const caption = this.inputText.getValue();\r\n     if (caption){\r\n       this.props.onCreate({caption});\r\n     } else {\r\n       this.inputText.setValue('');\r\n       this.setState({validationMessages:[this.props.msgOnIsEmptyName('Group')]});\r\n     }\r\n  }\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {onClose} = this.props\r\n        , {validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n        <RowInputText\r\n           ref={this._refInputText}\r\n           caption=\"Group\"\r\n        />\r\n        <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n        <div style={S.COMMAND_DIV}>\r\n           <FlatButton\r\n              isPrimary={true}\r\n              caption=\"Create\"\r\n              timeout={0}\r\n              onClick={this._handlerCreate}\r\n           />\r\n           <FlatButton\r\n              caption=\"Clear\"\r\n              timeout={0}\r\n              onClick={this._handlerClear}\r\n           />\r\n           <FlatButton\r\n              caption=\"Close\"\r\n              timeout={0}\r\n              onClick={onClose}\r\n           />\r\n         </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GroupAddPane\r\n"],"file":"GroupAddPane.js"}