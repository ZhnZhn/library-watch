{"version":3,"sources":["../../../src/components/browser-watch/GroupAddPane.jsx"],"names":["Styles","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","GroupAddPane","createClass","displayName","propTypes","store","PropTypes","object","actionCompleted","string","actionFailed","forActionType","msgOnIsEmptyName","func","onCreate","onClose","getInitialState","validationMessages","componentDidMount","unsubscribe","props","listen","_onStore","componentWillUnmount","actionType","data","_handlerClear","setState","messages","inputText","setValue","state","length","_handlerCreate","caption","getValue","render","c"],"mappings":"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","file":"GroupAddPane.js","sourcesContent":["import React from 'react';\r\n\r\nimport RowInputText from './RowInputText';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\nimport ValidationMessagesFragment from '../zhnMoleculs/ValidationMessagesFragment';\r\n\r\nconst Styles = {\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n}\r\n\r\nconst GroupAddPane = React.createClass({\r\n  displayName : 'GroupAddPane',\r\n  propTypes : {\r\n    store : React.PropTypes.object,\r\n    actionCompleted : React.PropTypes.string,\r\n    actionFailed : React.PropTypes.string,\r\n    forActionType : React.PropTypes.string,\r\n    msgOnIsEmptyName : React.PropTypes.func,\r\n    onCreate : React.PropTypes.func,\r\n    onClose : React.PropTypes.func\r\n  },\r\n  getInitialState(){\r\n    return {\r\n      validationMessages : []\r\n    }\r\n  },\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  },\r\n  _onStore(actionType, data){\r\n          //store\r\n    const {actionCompleted, actionFailed, forActionType} = this.props;\r\n    if (actionType === actionCompleted && data.forActionType === forActionType){\r\n       this._handlerClear();\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n       this.setState({validationMessages: data.messages});\r\n    }\r\n  },\r\n\r\n  _handlerClear(){\r\n    this.inputText.setValue('');\r\n    if (this.state.validationMessages.length>0){\r\n       this.setState({validationMessages: []});\r\n    }\r\n  },\r\n\r\n  _handlerCreate(){\r\n     const caption = this.inputText.getValue();\r\n     if (caption){\r\n       this.props.onCreate({caption});\r\n     } else {\r\n       this.inputText.setValue('');\r\n       this.setState({validationMessages:[this.props.msgOnIsEmptyName('Group')]});\r\n     }\r\n  },\r\n\r\n  render(){\r\n    const {onClose} = this.props\r\n        , {validationMessages} = this.state;\r\n    return (\r\n      <div>\r\n        <RowInputText\r\n           ref={c => this.inputText = c}\r\n           caption={'Group:'}\r\n        />\r\n        <ValidationMessagesFragment\r\n           validationMessages={validationMessages}\r\n         />\r\n        <div style={Styles.COMMAND_DIV}>\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Create\"\r\n            onClick={this._handlerCreate}\r\n         />\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Clear\"\r\n            onClick={this._handlerClear}\r\n         />\r\n         <ToolBarButton\r\n            type=\"TypeC\"\r\n            caption=\"Close\"\r\n            onClick={onClose}\r\n         />\r\n       </div>\r\n      </div>\r\n    )\r\n  }\r\n})\r\n\r\nexport default GroupAddPane\r\n"]}