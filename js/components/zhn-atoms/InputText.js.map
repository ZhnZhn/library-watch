{"version":3,"sources":["../../../src/components/zhn-atoms/InputText.jsx"],"names":["CL","FIELD","INPUT","BT_CLEAR","HAS_TOUCH","has","_isKeyClean","keyCode","_isKeyEnter","_isStr","str","BtClear","isValue","onClick","InputText","props","_hChange","event","setState","value","target","_hKeyDown","onEnter","_hClean","focus","_refInput","element","_inputElement","state","initValue","getDerivedStateFromProps","isUpdateInitValue","render","style","placeholder","maxLength","Boolean","getValue","trim","setValue","Component","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport has from '../has'\r\n\r\nconst CL = {\r\n  FIELD: 'm-field',\r\n  INPUT:  'm-field__input',\r\n  BT_CLEAR: 'm-field__bt-clear'\r\n};\r\n\r\nconst { HAS_TOUCH } = has;\r\n\r\nconst _isKeyClean = ({ keyCode }) => keyCode === 27\r\n || keyCode === 46;\r\nconst _isKeyEnter = ({ keyCode }) => keyCode === 13;\r\n\r\nconst _isStr = str => typeof str === 'string';\r\n\r\nconst BtClear = ({ isValue, onClick }) => (\r\n  <button\r\n    class={CL.BT_CLEAR}\r\n    tabIndex=\"-1\"\r\n    onClick={onClick}\r\n  >\r\n    { isValue ? 'x' : '' }\r\n  </button>\r\n);\r\n\r\nclass InputText extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isUpdateInitValue: PropTypes.bool,\r\n    initValue: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    style: PropTypes.object\r\n    onEnter: PropTypes.func\r\n  }\r\n  */\r\n  static defaultProps = {\r\n    isUpdateInitValue: false,\r\n    initValue: '',\r\n    placeholder: '',\r\n    maxLength: 50,\r\n    onEnter: () => {}\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      value: props.initValue\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps({ isUpdateInitValue, initValue }){\r\n    return isUpdateInitValue && _isStr(initValue)\r\n      ?  { value: initValue }\r\n      : null;\r\n  }\r\n\r\n  _hChange = (event) => {\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  _hKeyDown = (event) => {\r\n     if ( _isKeyClean(event) ){\r\n       this.setState({ value: '' })\r\n     } else if ( _isKeyEnter(event) ) {\r\n       this.props.onEnter(event.target.value)\r\n     }\r\n  }\r\n\r\n  _hClean = () => {\r\n    this.setState({ value: '' })\r\n    this.focus()\r\n  }\r\n\r\n  _refInput = element => this._inputElement = element\r\n\r\n  render(){\r\n    const {\r\n      style,\r\n      placeholder,\r\n      maxLength\r\n    } = this.props\r\n    , { value } = this.state;\r\n    return (\r\n      <div className={CL.FIELD}>\r\n        <input\r\n          ref={this._refInput}\r\n          type=\"text\"\r\n          autoCorrect=\"off\"\r\n          autoCapitalize=\"off\"\r\n          spellCheck={false}\r\n          className={CL.INPUT}\r\n          style={style}\r\n          value={value}\r\n          placeholder={placeholder}\r\n          maxLength={maxLength}\r\n          onChange={this._hChange}\r\n          onKeyDown={this._hKeyDown}\r\n        />\r\n        {\r\n          HAS_TOUCH && <BtClear\r\n            isValue={Boolean(value)}\r\n            onClick={this._hClean}\r\n          />\r\n        }\r\n     </div>\r\n   );\r\n  }\r\n\r\n  getValue(){\r\n    return this.state.value.trim();\r\n  }\r\n  setValue(value){\r\n    this.setState({ value });\r\n  }\r\n  focus(){\r\n    if (this._inputElement) {\r\n      this._inputElement.focus()\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default InputText\r\n"],"file":"InputText.js"}