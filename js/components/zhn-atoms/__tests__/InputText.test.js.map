{"version":3,"sources":["../../../../src/components/zhn-atoms/__tests__/InputText.test.js"],"names":["_fnGetWrapper","props","initValue","wrapper","input","find","t","true","is","prop","state","style","color","placeholder","value1","value2","simulate","target","value","keyCode","initValue1","initValue2","setProps","isUpdateInitValue","instance","getValue","trim","setValue"],"mappings":"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","file":"InputText.test.js","sourcesContent":["import React from 'react';\r\n\r\nimport test from 'ava';\r\nimport { shallow } from 'enzyme';\r\n\r\nimport InputText from '../../../../js/components/zhn-atoms/InputText';\r\n\r\nconst _fnGetWrapper = (props) => {\r\n  return shallow(<InputText {...props} />);\r\n}\r\n\r\ntest('render input type text with state value equal prop initValue', t => {\r\n  const initValue = 'initValue'\r\n      , wrapper = _fnGetWrapper({ initValue })\r\n      , input = wrapper.find('input');\r\n\r\n  t.true(wrapper.is('div'));\r\n  t.is(input.prop('type'), \"text\");\r\n  t.is(input.prop('value'), initValue);\r\n  t.is(wrapper.state('value'), initValue);\r\n})\r\n\r\ntest('should use prop style', t => {\r\n  const style = { color: 'green '}\r\n      , wrapper = _fnGetWrapper({ style })\r\n      , input = wrapper.find('input')\r\n\r\n  t.is(input.props().style.color, style.color);\r\n})\r\n\r\ntest('should use prop placeholder', t => {\r\n   const placeholder = \"input text\"\r\n       , wrapper = _fnGetWrapper({ placeholder })\r\n\r\n   t.is(wrapper.find('input').prop('placeholder'), placeholder);\r\n})\r\n\r\ntest('should change state value onChange', t => {\r\n   const value1 = 'a'\r\n      , value2 = 'ab'\r\n      , wrapper = _fnGetWrapper()\r\n      , input = wrapper.find('input');\r\n\r\n   input.simulate('change', { target: { value: value1}} )\r\n   t.is(wrapper.state('value'), value1);\r\n   input.simulate('change', { target: { value: value2}} )\r\n   t.is(wrapper.state('value'), value2);\r\n   input.simulate('change', { target: { value: value1}} )\r\n   t.is(wrapper.state('value'), value1);\r\n})\r\n\r\ntest('should clear state value onKeyDown 27', t => {\r\n   const initValue = 'initValue'\r\n        , wrapper = _fnGetWrapper({ initValue })\r\n        , input = wrapper.find('input');\r\n\r\n  t.is(wrapper.state('value'), initValue)\r\n  input.simulate('keydown', { keyCode : 27 })\r\n  t.is(wrapper.state('value'), '')\r\n})\r\n\r\ntest('should update state value on new prop initValue with isUpdateInitValue true', t => {\r\n  const initValue1 = 'initValue1'\r\n      , initValue2 = 'initValue2'\r\n      , wrapper = _fnGetWrapper({ initValue: initValue1 });\r\n\r\n  t.is(wrapper.state('value'), initValue1)\r\n  wrapper.setProps({ initValue: initValue2, isUpdateInitValue: true })\r\n  t.is(wrapper.state('value'), initValue2)\r\n})\r\n\r\ntest('should not update state value on new prop initValue without isUpdateInitValue true', t => {\r\n  const initValue1 = 'initValue1'\r\n      , initValue2 = 'initValue2'\r\n      , wrapper = _fnGetWrapper({ initValue: initValue1 });\r\n\r\n  t.is(wrapper.state('value'), initValue1)\r\n  wrapper.setProps({ initValue: initValue2 })\r\n  t.is(wrapper.state('value'), initValue1)\r\n})\r\n\r\ntest('should instance method getValue return trim value', t => {\r\n  const initValue = 'initValue '\r\n      , wrapper = _fnGetWrapper({ initValue })\r\n      , input = wrapper.find('input')\r\n\r\n   t.is(wrapper.instance().getValue(), initValue.trim())\r\n   input.simulate('change', { target: { value: initValue + ' '}})\r\n   t.is(wrapper.instance().getValue(), initValue.trim())\r\n})\r\n\r\ntest('should instance method setValue set state value', t => {\r\n   const initValue = 'initValue'\r\n        , value = 'value'\r\n        , wrapper = _fnGetWrapper({ initValue })\r\n\r\n    t.is(wrapper.state('value'), initValue)\r\n    wrapper.instance().setValue(value)\r\n    t.is(wrapper.state('value'), value)\r\n})\r\n"]}