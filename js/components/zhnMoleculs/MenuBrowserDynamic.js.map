{"version":3,"sources":["../../../src/components/zhnMoleculs/MenuBrowserDynamic.jsx"],"names":["Styles","browser","paddingRight","scrollDiv","overflowY","height","MenuBrowserDynamic","createClass","getInitialState","isInitShow","props","isShow","isLoaded","menuItems","componentWillMount","unsubscribe","store","listen","_onStore","componentDidMount","_loadMenu","componentWillUpdate","nextProps","nextState","componentWillUnmount","browserType","caption","sourceMenuUrl","onLoadMenu","actionType","data","showAction","updateAction","loadCompletedAction","_handlerShow","setState","getBrowserMenu","_handlerHide","_renderMenuParts","map","menuPart","index","render","children","state"],"mappings":"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","file":"MenuBrowserDynamic.js","sourcesContent":["import React from 'react';\r\n\r\nimport Browser from '../zhnAtoms/Browser';\r\nimport CaptionRow from '../zhnAtoms/CaptionRow';\r\nimport ScrollPane from '../zhnAtoms/ScrollPane';\r\nimport MenuPart from './MenuPart';\r\n\r\nconst Styles = {\r\n  browser : {\r\n    paddingRight: '0'\r\n  },\r\n  scrollDiv : {\r\n    overflowY: 'auto',\r\n    height: '92%',\r\n    //height: 'calc(100vh - 90px)',\r\n    paddingRight: '10px'\r\n  }\r\n};\r\n\r\n\r\nconst MenuBrowserDynamic = React.createClass({\r\n  getInitialState(){\r\n    const { isInitShow } = this.props;\r\n    return {\r\n      isShow: isInitShow ? true : false,\r\n      isLoaded : false,\r\n      menuItems: []\r\n    }\r\n  },\r\n\r\n  componentWillMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  },\r\n  componentDidMount(){\r\n    this._loadMenu();\r\n  },\r\n  componentWillUpdate(nextProps, nextState){\r\n     if (!nextState.isLoaded && nextState.isShow){\r\n       this._loadMenu();\r\n     }\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  },\r\n\r\n  _loadMenu(){\r\n    const { browserType, caption, sourceMenuUrl, onLoadMenu } = this.props;\r\n    onLoadMenu({ browserType, caption, sourceMenuUrl });\r\n  },\r\n\r\n  _onStore: function(actionType, data){\r\n    const { browserType, store, showAction, updateAction, loadCompletedAction } = this.props;\r\n    if (actionType === showAction && data === browserType){\r\n      this._handlerShow();\r\n    } else if (actionType === loadCompletedAction && data.browserType === browserType){\r\n      this.setState({ menuItems: data.menuItems, isLoaded : true });\r\n    } else if (actionType === updateAction && data === browserType){\r\n      this.setState({ menuItems: store.getBrowserMenu(browserType) });\r\n    }\r\n  },\r\n\r\n  _handlerHide: function(){\r\n    this.setState({isShow : false});\r\n  },\r\n  _handlerShow: function(){\r\n    this.setState({isShow : true});\r\n  },\r\n\r\n  _renderMenuParts(menuItems=[]){\r\n    return menuItems.map((menuPart, index) => {\r\n      return (<MenuPart key={index} {...menuPart} />)\r\n    });\r\n  },\r\n\r\n  render(){\r\n    const {caption, children} = this.props\r\n        , {menuItems, isShow} = this.state;\r\n\r\n    return (\r\n       <Browser isShow={isShow} style={Styles.browser}>\r\n          <CaptionRow\r\n             caption={caption}\r\n             onClose={this._handlerHide}\r\n          />\r\n          <ScrollPane style={Styles.scrollDiv}>\r\n            {this._renderMenuParts(menuItems)}\r\n            {children}\r\n          </ScrollPane>\r\n       </Browser>\r\n    )\r\n  }\r\n});\r\n\r\n\r\nexport default MenuBrowserDynamic;\r\n"]}