{"version":3,"sources":["../../../src/components/zhnMoleculs/ModalDialog.jsx"],"names":["ClassNames","SHOWING","HIDING","Styles","SHOW","display","HIDE","HIDE_POPUP","opacity","transform","ROOT_DIV","position","top","left","backgroundColor","border","borderRadius","boxShadow","zIndex","CAPTON_DIV","padding","color","textAlign","fontSize","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ModalDialog","createClass","displayName","propTypes","isShow","PropTypes","bool","isWithButton","timeout","number","caption","string","style","object","onClose","func","getDefaultProps","isNotUpdate","getInitialState","wasClosing","shouldComponentUpdate","nextProps","nextState","props","componentDidUpdate","prevProps","prevState","setTimeout","setState","_handlerClickDialog","event","stopPropagation","_renderCommandButton","commandButtons","render","children","_className","_style","Object","assign"],"mappings":"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","file":"ModalDialog.js","sourcesContent":["import React from 'react';\r\n\r\nimport SvgClose from '../zhnAtoms/SvgClose';\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nconst ClassNames = {\r\n  SHOWING : 'show-popup',\r\n  HIDING : 'hide-popup'\r\n};\r\n\r\nconst Styles = {\r\n  SHOW : {\r\n    display : 'block'\r\n  },\r\n  HIDE : {\r\n    display : 'none'\r\n  },\r\n  HIDE_POPUP : {\r\n    opacity: 0,\r\n    transform : 'scaleY(0)'\r\n  },\r\n  ROOT_DIV: {\r\n    position: 'absolute',\r\n    top: '20%',\r\n    left: '40%',\r\n    display: 'block',\r\n    backgroundColor: '#4D4D4D',\r\n    border: 'solid 2px #232F3B',\r\n    borderRadius: '5px',\r\n    boxShadow: 'rgba(0, 0, 0, 0.2) 0px 0px 0px 6px',\r\n    zIndex: 10\r\n  },\r\n  CAPTON_DIV:{\r\n    padding: '5px',\r\n    color: 'rgba(164, 135, 212,1)',\r\n    backgroundColor: '#232F3B',\r\n    textAlign: 'center',\r\n    fontSize: '18px'\r\n  },\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n};\r\n\r\n\r\nconst ModalDialog = React.createClass({\r\n   displayName : 'ModalDialog',\r\n   propTypes : {\r\n     isShow : React.PropTypes.bool,\r\n     isWithButton : React.PropTypes.bool,\r\n     timeout : React.PropTypes.number,\r\n     caption : React.PropTypes.string,\r\n     style : React.PropTypes.object,\r\n     onClose : React.PropTypes.func\r\n   },\r\n   getDefaultProps(){\r\n     return {\r\n       isWithButton : true,\r\n       isNotUpdate : false,\r\n       timeout : 450\r\n     }\r\n   },\r\n   getInitialState(){\r\n     this.wasClosing = false;\r\n     return {}\r\n   },\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props){\r\n       if (nextProps.isNotUpdate){\r\n         return false;\r\n       }\r\n     }\r\n     return true;\r\n   },\r\n\r\n   componentDidUpdate(prevProps, prevState){\r\n     if (this.wasClosing){\r\n       setTimeout(()=>{\r\n         this.setState({});\r\n       }, this.props.timeout)\r\n     }\r\n   },\r\n\r\n  _handlerClickDialog(event){\r\n    event.stopPropagation();\r\n  },\r\n\r\n  _renderCommandButton: function(){\r\n    const {commandButtons, onClose} = this.props;\r\n    return (\r\n      <div style={Styles.COMMAND_DIV}>\r\n        {commandButtons}\r\n        <ToolBarButton\r\n           type=\"TypeC\"\r\n           caption=\"Close\"\r\n           onClick={onClose}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n\r\n  render: function(){\r\n    const { isShow, isWithButton, caption, style, children, onClose } = this.props;\r\n\r\n    let _className, _style;\r\n\r\n    if (this.wasClosing){\r\n      _style = Styles.HIDE;\r\n      this.wasClosing = false;\r\n    } else {\r\n      _className = isShow ? ClassNames.SHOWING : ClassNames.HIDING;\r\n      _style = isShow ? Styles.SHOW : Styles.HIDE_POPUP;\r\n      if (!isShow){\r\n        this.wasClosing = true;\r\n      }\r\n    }\r\n\r\n    return (\r\n         <div\r\n             className={_className}\r\n             style={Object.assign({}, Styles.ROOT_DIV, style, _style)}\r\n             onClick={this._handlerClickDialog}\r\n         >\r\n              <div style={Styles.CAPTON_DIV}>\r\n                 <span>{caption}</span>\r\n                 <SvgClose onClose={onClose} />\r\n              </div>\r\n\r\n             <div>\r\n               {children}\r\n             </div>\r\n\r\n            {isWithButton && this._renderCommandButton()}\r\n\r\n        </div>\r\n    );\r\n  }\r\n\r\n});\r\n\r\nexport default ModalDialog;\r\n"]}