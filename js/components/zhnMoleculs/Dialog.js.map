{"version":3,"sources":["../../../src/components/zhnMoleculs/Dialog.jsx"],"names":["styles","rootDiv","position","top","left","backgroundColor","border","borderRadius","boxShadow","zIndex","childrenDiv","cursor","commandDiv","float","marginTop","marginBottom","marginRight","Dialog","_refRootComp","node","rootComp","Interact","makeDragable","commandButtons","onShowChart","onClose","props","isShow","caption","children","_styleShow","display","_classShow","undefined","_renderCommandButton","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS;AACbC,WAAS;AACPC,cAAU,UADH;AAEPC,SAAK,MAFE;AAGPC,UAAM,MAHC;AAIPC,qBAAiB,SAJV;AAKPC,YAAQ,mBALD;AAMPC,kBAAc,KANP;AAOPC,eAAW,oCAPJ;AAQPC,YAAQ;AARD,GADI;AAWbC,eAAc;AACZC,YAAS;AADG,GAXD;AAcbC,cAAa;AACVD,YAAQ,SADE;AAEVE,WAAO,OAFG;AAGVC,eAAW,KAHD;AAIVC,kBAAc,MAJJ;AAKVC,iBAAa;AALH;AAdA,CAAf;AAPA;;IA8BMC,M;;;;;;;;;;;;;;oMAqCJC,Y,GAAe,UAACC,IAAD;AAAA,aAAU,MAAKC,QAAL,GAAgBD,IAA1B;AAAA,K;;;;;;AApCf;;;;;;;;;;;;;;wCAcmB;AAChBE,yBAASC,YAAT,CAAsB,KAAKF,QAA3B;AACF;;;yCAEoBG,c,EAAgBC,W,EAAaC,O,EAAQ;AACxD,aACE;AAAA;AAAA,UAAK,OAAOzB,OAAOY,UAAnB;AACGW,sBADH;AAEE,sCAAC,uBAAD;AACG,gBAAK,OADR;AAEG,mBAAQ,MAFX;AAGG,mBAASC;AAHZ,UAFF;AAOE,sCAAC,uBAAD;AACG,gBAAK,OADR;AAEG,mBAAQ,OAFX;AAGG,mBAASC;AAHZ;AAPF,OADF;AAeD;;;6BAIO;AAAA,mBAII,KAAKC,KAJT;AAAA,UAEEC,MAFF,UAEEA,MAFF;AAAA,UAEUC,OAFV,UAEUA,OAFV;AAAA,UAEmBC,QAFnB,UAEmBA,QAFnB;AAAA,UAE6BN,cAF7B,UAE6BA,cAF7B;AAAA,UAGEC,WAHF,UAGEA,WAHF;AAAA,UAGeC,OAHf,UAGeA,OAHf;AAAA,UAKAK,UALA,GAKaH,SACR,EAAEI,SAAS,OAAX,EADQ,GAER,EAAEA,SAAS,MAAX,EAPL;AAAA,UAQAC,UARA,GAQaL,SACR,YADQ,GAERM,SAVL;;AAYN,aACE;AAAA;AAAA;AACK,eAAK,KAAKf,YADf;AAEK,qBAAWc,UAFhB;AAGK,4CAAYhC,OAAOC,OAAnB,EAA+B6B,UAA/B;AAHL;AAKE,sCAAC,uBAAD;AACE,mBAASF,OADX;AAEE,mBAASH;AAFX,UALF;AASE;AAAA;AAAA,YAAK,OAAOzB,OAAOU,WAAnB;AACImB;AADJ,SATF;AAYG,aAAKK,oBAAL,CAA0BX,cAA1B,EAA0CC,WAA1C,EAAuDC,OAAvD;AAZH,OADF;AAgBD;;;EAnEkBU,gB;;kBAsENlB,M","file":"Dialog.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nimport Caption from './DialogCaption'\r\nimport ToolBarButton from '../header/ToolBarButton';\r\n\r\nimport Interact from '../../utils/Interact';\r\n\r\nconst styles = {\r\n  rootDiv: {\r\n    position: 'absolute',\r\n    top: '30px',\r\n    left: '50px',\r\n    backgroundColor: '#4D4D4D',\r\n    border: 'solid 2px #232F3B',\r\n    borderRadius: '5px',\r\n    boxShadow: 'rgba(0, 0, 0, 0.2) 0px 0px 0px 6px',\r\n    zIndex: 10\r\n  },\r\n  childrenDiv : {\r\n    cursor : 'default'\r\n  },\r\n  commandDiv : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '8px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  },\r\n};\r\n\r\nclass Dialog extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isShow: PropTypes.bool,\r\n    caption: PropTypes.string,\r\n    children: PropTypes.oneOfType([\r\n      PropTypes.arrayOf(PropTypes.node),\r\n      PropTypes.node\r\n    ]),\r\n    commandButtons: PropTypes.arrayOf(PropTypes.node),\r\n    onShowChart: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n */\r\n\r\n  componentDidMount(){\r\n     Interact.makeDragable(this.rootComp)\r\n  }\r\n\r\n  _renderCommandButton(commandButtons, onShowChart, onClose){\r\n    return (\r\n      <div style={styles.commandDiv}>\r\n        {commandButtons}\r\n        <ToolBarButton\r\n           type=\"TypeC\"\r\n           caption=\"Show\"\r\n           onClick={onShowChart}\r\n        />\r\n        <ToolBarButton\r\n           type=\"TypeC\"\r\n           caption=\"Close\"\r\n           onClick={onClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _refRootComp = (node) => this.rootComp = node\r\n\r\n  render(){\r\n    const {\r\n            isShow, caption, children, commandButtons,\r\n            onShowChart, onClose\r\n          } = this.props\r\n        , _styleShow = isShow\r\n             ? { display: 'block' }\r\n             : { display: 'none' }\r\n        , _classShow = isShow\r\n             ? 'show-popup'\r\n             : undefined;\r\n\r\n    return (\r\n      <div\r\n           ref={this._refRootComp}\r\n           className={_classShow}\r\n           style={{ ...styles.rootDiv, ..._styleShow }}\r\n      >\r\n        <Caption\r\n          caption={caption}\r\n          onClose={onClose}\r\n        />\r\n        <div style={styles.childrenDiv}>\r\n           {children}\r\n        </div>\r\n        {this._renderCommandButton(commandButtons, onShowChart, onClose)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dialog\r\n"]}