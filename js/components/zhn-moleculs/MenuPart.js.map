{"version":3,"sources":["../../../src/components/zhn-moleculs/MenuPart.jsx"],"names":["CL","NOT_SELECTED","ROW_EVEN","ROW_ODD","FILL_OPEN","FILL_CLOSE","S","CAPTION_ROW","paddingLeft","_renderMenuItems","rowClass","items","map","item","index","_className","menuBadge","counter","isOpen","onBadgeOpen","onBadgeClose","onClick","title","MenuPart","caption","isInitClose"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,EAAE,GAAG;AACTC,EAAAA,YAAY,EAAE,cADL;AAETC,EAAAA,QAAQ,EAAE,+BAFD;AAGTC,EAAAA,OAAO,EAAE;AAHA,CAAX;AAMA,IAAMC,SAAS,GAAG,SAAlB;AACA,IAAMC,UAAU,GAAG,aAAnB;AAGA,IAAMC,CAAC,GAAG;AACRC,EAAAA,WAAW,EAAE;AACXC,IAAAA,WAAW,EAAE;AADF;AADL,CAAV;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASC,QAAT,EAAmBC,KAAnB,EAA4B;AAAA,MAATA,KAAS;AAATA,IAAAA,KAAS,GAAH,EAAG;AAAA;;AACnD,SAAOA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChC,QAAMC,UAAU,GAAIL,QAAD,GACRA,QAAQ,GAAG,GAAX,GAAiBV,EAAE,CAACC,YADZ,GAEPa,KAAK,GAAG,CAAT,GACId,EAAE,CAACE,QADP,GAEIF,EAAE,CAACG,OAJlB;AAAA,QAKMa,SAAS,GAAIH,IAAI,CAACI,OAAL,KAAiB,CAAlB,gBAEJ,gCAAC,qBAAD;AACE,MAAA,OAAO,EAAEJ,IAAI,CAACI,OADhB;AAEE,MAAA,MAAM,EAAEJ,IAAI,CAACK,MAFf;AAGE,MAAA,WAAW,EAAEL,IAAI,CAACM,WAHpB;AAIE,MAAA,YAAY,EAAEN,IAAI,CAACO;AAJrB,MAFI,GASN,IAdZ;;AAeA,wBACG;AACE,MAAA,GAAG,EAAEN,KADP;AAEE,MAAA,QAAQ,EAAE,CAFZ;AAGE,MAAA,SAAS,EAAEC,UAHb;AAIE,MAAA,OAAO,EAAEF,IAAI,CAACQ,OAJhB,CAKE;;AALF,OAOIR,IAAI,CAACS,KAPT,EAQIN,SARJ,CADH;AAYD,GA5BM,CAAP;AA6BD,CA9BD;;AAgCA,IAAMO,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGb,QAAH,QAAGA,QAAH;AAAA,MAAac,OAAb,QAAaA,OAAb;AAAA,MAAsBb,KAAtB,QAAsBA,KAAtB;AAAA,MAA6Bc,WAA7B,QAA6BA,WAA7B;AAAA,sBACf,gCAAC,qBAAD;AACG,IAAA,eAAe,EAAEnB,CAAC,CAACC,WADtB;AAEG,IAAA,QAAQ,EAAEH,SAFb;AAGG,IAAA,SAAS,EAAEC,UAHd;AAIG,IAAA,OAAO,EAAEmB,OAJZ;AAKG,IAAA,OAAO,EAAEC;AALZ,KAOIhB,gBAAgB,CAACC,QAAD,EAAWC,KAAX,CAPpB,CADe;AAAA,CAAjB;AAYA;;;;;;;;;eAQeY,Q","sourcesContent":["import React from 'react';\r\nimport MenuBadge from '../zhn-atoms/MenuBadge';\r\nimport OpenClose2 from '../zhn-atoms/OpenClose2';\r\n\r\nconst CL = {\r\n  NOT_SELECTED: 'not-selected',\r\n  ROW_EVEN: 'row__topic__even not-selected',\r\n  ROW_ODD: 'row__topic__odd not-selected'\r\n};\r\n\r\nconst FILL_OPEN = '#1b2836';\r\nconst FILL_CLOSE = 'transparent';\r\n\r\n\r\nconst S = {\r\n  CAPTION_ROW: {\r\n    paddingLeft: 6\r\n  }\r\n};\r\n\r\nconst _renderMenuItems = function(rowClass, items=[]){\r\n  return items.map((item, index) => {\r\n    const _className = (rowClass)\r\n             ? rowClass + ' ' + CL.NOT_SELECTED\r\n             : (index % 2)\r\n                 ? CL.ROW_EVEN\r\n                 : CL.ROW_ODD\r\n        , menuBadge = (item.counter !== 0)\r\n             ? (\r\n                  <MenuBadge\r\n                    counter={item.counter}\r\n                    isOpen={item.isOpen}\r\n                    onBadgeOpen={item.onBadgeOpen}\r\n                    onBadgeClose={item.onBadgeClose}\r\n                 />\r\n                )\r\n              : null;\r\n    return (\r\n       <div\r\n         key={index}\r\n         tabIndex={0}\r\n         className={_className}\r\n         onClick={item.onClick}\r\n         //onKeyPress={item.onClick}\r\n        >\r\n          {item.title}\r\n          {menuBadge}\r\n       </div>\r\n    )\r\n  })\r\n}\r\n\r\nconst MenuPart = ({ rowClass, caption, items, isInitClose }) => (\r\n  <OpenClose2\r\n     styleCaptionRow={S.CAPTION_ROW}\r\n     fillOpen={FILL_OPEN}\r\n     fillClose={FILL_CLOSE}\r\n     caption={caption}\r\n     isClose={isInitClose}\r\n  >\r\n     {_renderMenuItems(rowClass, items)}\r\n  </OpenClose2>\r\n)\r\n\r\n/*\r\nMenuPart.propTypes = {\r\n  caption: PropTypes.string,\r\n  items: PropTypes.arrayOf(PropTypes.object),\r\n  isInitClose: PropTypes.bool\r\n}\r\n*/\r\n\r\nexport default MenuPart\r\n"],"file":"MenuPart.js"}