{"version":3,"sources":["../../../src/components/zhn-moleculs/ModalPane.jsx"],"names":["S","DIV","backgroundColor","ModalPane","_hClickOutside","event","rootNode","contains","target","stopPropagation","props","onClose","_addOutsideListener","document","addEventListener","_removeOutsideListener","removeEventListener","_refRootNode","n","isShow","prevProps","children","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AACA;;AAEA,IAAMA,IAAI;AACRC,OAAK;AACHC,qBAAiB;AADd;AADG,CAAV;;IAMMC,S;;;;;;;;;;;;;;0MAeJC,c,GAAiB,UAACC,KAAD,EAAW;AAC1B,UAAI,MAAKC,QAAL,IACC,MAAKA,QAAL,CAAcC,QADf,IAEC,CAAC,MAAKD,QAAL,CAAcC,QAAd,CAAuBF,MAAMG,MAA7B,CAFN,EAGC;AACCH,cAAMI,eAAN;AACA,cAAKC,KAAL,CAAWC,OAAX,CAAmBN,KAAnB;AACD;AACF,K,QAEDO,mB,GAAsB,YAAM;AAC1BC,eAASC,gBAAT,CAA0B,OAA1B,EAAmC,MAAKV,cAAxC,EAAwD,IAAxD;AACD,K,QACDW,sB,GAAyB,YAAM;AAC7BF,eAASG,mBAAT,CAA6B,OAA7B,EAAsC,MAAKZ,cAA3C,EAA2D,IAA3D;AACD,K,QAqBDa,Y,GAAe;AAAA,aAAK,MAAKX,QAAL,GAAgBY,CAArB;AAAA,K;;AAlDf;;;;;;;;;;;;wCA+BoB;AAClB,UAAI,KAAKR,KAAL,CAAWS,MAAf,EAAuB;AACrB,aAAKP,mBAAL;AACD;AACF;;;2CACsB;AACrB,WAAKG,sBAAL;AACD;;;uCAEkBK,S,EAAW;AAC5B,UAAI,KAAKV,KAAL,KAAeU,SAAnB,EAA8B;AAC5B,YAAI,KAAKV,KAAL,CAAWS,MAAf,EAAsB;AACpB,eAAKP,mBAAL;AACD,SAFD,MAEO;AACL,eAAKG,sBAAL;AACD;AACF;AACF;;;6BAIO;AAAA,UACEM,QADF,GACe,KAAKX,KADpB,CACEW,QADF;;;AAGN,aACE;AAAA;AAAA;AACG,eAAK,KAAKJ,YADb;AAEG,iBAAOjB,EAAEC;AAFZ;AAIGoB;AAJH,OADF;AAQD;;;EAhEqBC,gB,UAWfC,Y,GAAe;AACpBZ,WAAS,mBAAM,CAAE;AADG,C;kBAwDTR,S","file":"ModalPane.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst S = {\r\n  DIV: {\r\n    backgroundColor: '#4d4d4d'\r\n  }\r\n};\r\n\r\nclass ModalPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    theme: PropTypes.object,\r\n    isShow: PropTypes.bool,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  static defaultProps = {\r\n    onClose: () => {}\r\n  }\r\n\r\n  _hClickOutside = (event) => {\r\n    if (this.rootNode\r\n      && this.rootNode.contains\r\n      && !this.rootNode.contains(event.target)\r\n    ){\r\n      event.stopPropagation()\r\n      this.props.onClose(event)\r\n    }\r\n  }\r\n\r\n  _addOutsideListener = () => {\r\n    document.addEventListener('click', this._hClickOutside, true)\r\n  }\r\n  _removeOutsideListener = () => {\r\n    document.removeEventListener('click', this._hClickOutside, true)\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.isShow) {\r\n      this._addOutsideListener()\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this._removeOutsideListener()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps ){\r\n      if (this.props.isShow){\r\n        this._addOutsideListener()\r\n      } else {\r\n        this._removeOutsideListener()\r\n      }\r\n    }\r\n  }\r\n\r\n  _refRootNode = n => this.rootNode = n\r\n\r\n  render(){\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <div\r\n         ref={this._refRootNode}\r\n         style={S.DIV}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalPane\r\n"]}