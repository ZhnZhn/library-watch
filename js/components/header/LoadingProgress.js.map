{"version":3,"sources":["../../../src/components/header/LoadingProgress.jsx"],"names":["COLOR","LOADING","FAILED","LoadingProgress","createClass","getInitialState","completed","color","componentDidMount","unsubscribe","props","store","listenLoadingProgress","_onStore","componentWillUnmount","actionType","option","setState","LOADING_COMPLETE","LOADING_FAILED","render","state"],"mappings":";;;;;;AAAA;;;;AAGA;;AACA;;;;;;AAFA;AAIA,IAAMA,QAAQ;AACZC,WAAU,SADE;AAEZC,UAAS;AAFG,CAAd;;AAKA,IAAMC,kBAAkB,gBAAMC,WAAN,CAAkB;AAAA;AACxCC,iBADwC,6BACvB;AACf,WAAO;AACLC,iBAAY,CADP;AAELC,aAAQP,MAAMC;AAFT,KAAP;AAID,GANuC;AAOxCO,mBAPwC,+BAOrB;AACjB;AACA,SAAKC,WAAL,GAAmB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,qBAAjB,CAAuC,KAAKC,QAA5C,CAAnB;AACD,GAVuC;AAWxCC,sBAXwC,kCAWlB;AACpB,SAAKL,WAAL;AACD,GAbuC;AAcxCI,UAdwC,oBAc/BE,UAd+B,EAcnBC,MAdmB,EAcZ;AACzB;;;;;;;;;;AAUC,QAAID,eAAe,mDAAOd,OAA1B,EAAkC;AAChC,WAAKgB,QAAL,CAAc,EAAEX,WAAW,EAAb,EAAiBC,OAAOP,MAAMC,OAA9B,EAAd;AACD,KAFD,MAEO,IAAIc,eAAe,mDAAOG,gBAA1B,EAA2C;AAChD,WAAKD,QAAL,CAAc,EAAEX,WAAW,GAAb,EAAkBC,OAAOP,MAAMC,OAA/B,EAAd;AACD,KAFM,MAEA,IAAIc,eAAe,mDAAOI,cAA1B,EAAyC;AAC9C,WAAKF,QAAL,CAAc,EAAEX,WAAW,GAAb,EAAkBC,OAAOP,MAAME,MAA/B,EAAd;AACD;AACJ,GAhCuC;AAkCxCkB,QAlCwC,oBAkChC;AAAA,iBACuB,KAAKC,KAD5B;AAAA,QACEf,SADF,UACEA,SADF;AAAA,QACaC,KADb,UACaA,KADb;;AAEN,WACE;AACG,cAAQ,CADX;AAEG,aAAOA,KAFV;AAGG,iBAAWD;AAHd,MADF;AAOD;AA3CuC,CAAlB,CAAxB;;kBA8CeH,e","file":"LoadingProgress.js","sourcesContent":["import React from 'react';\r\n\r\n//import { ChartActionTypes } from '../../flux/actions/ChartActions';\r\nimport { LoadingProgressActionTypes as Action } from '../../flux/actions/LoadingProgressActions';\r\nimport ProgressLine from '../zhnAtoms/ProgressLine';\r\n\r\nconst COLOR = {\r\n  LOADING : '#2F7ED8',\r\n  FAILED : 'rgb(237, 88, 19)'\r\n};\r\n\r\nconst LoadingProgress = React.createClass({\r\n  getInitialState(){\r\n    return {\r\n      completed : 0,\r\n      color : COLOR.LOADING\r\n    }\r\n  },\r\n  componentDidMount(){\r\n    //this.unsubscribe = this.props.store.listen(this._onStore);\r\n    this.unsubscribe = this.props.store.listenLoadingProgress(this._onStore);\r\n  },\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  },\r\n  _onStore(actionType, option){\r\n     /*\r\n      if (actionType === ChartActionTypes.LOAD_STOCK){\r\n        this.setState({ completed: 35, color: COLOR.LOADING });\r\n      } else if (actionType === ChartActionTypes.LOAD_STOCK_COMPLETED\r\n                 || actionType === ChartActionTypes.LOAD_STOCK_ADDED){\r\n        this.setState({ completed: 100, color: COLOR.LOADING });\r\n      } else if (actionType === ChartActionTypes.LOAD_STOCK_FAILED){\r\n        this.setState({ completed: 100, color: COLOR.FAILED })\r\n      }\r\n      */\r\n      if (actionType === Action.LOADING){\r\n        this.setState({ completed: 35, color: COLOR.LOADING });\r\n      } else if (actionType === Action.LOADING_COMPLETE){\r\n        this.setState({ completed: 100, color: COLOR.LOADING });\r\n      } else if (actionType === Action.LOADING_FAILED){\r\n        this.setState({ completed: 100, color: COLOR.FAILED })\r\n      }\r\n  },\r\n\r\n  render(){\r\n    const { completed, color } = this.state;\r\n    return (\r\n      <ProgressLine\r\n         height={3}\r\n         color={color}\r\n         completed={completed}\r\n      />\r\n    )\r\n  }\r\n});\r\n\r\nexport default LoadingProgress\r\n"]}