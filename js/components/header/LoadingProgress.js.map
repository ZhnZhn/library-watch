{"version":3,"sources":["../../../src/components/header/LoadingProgress.jsx"],"names":["COLOR","LOADING","FAILED","LoadingProgress","state","completed","color","_onStore","actionType","option","Action","setState","LOADING_COMPLETE","LOADING_FAILED","componentDidMount","unsubscribe","props","store","listenLoadingProgress","componentWillUnmount","render","Component"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA,IAAMA,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAG,SADE;AAEZC,EAAAA,MAAM,EAAG;AAFG,CAAd;;IAKMC,e;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,CADL;AAENC,MAAAA,KAAK,EAAEN,KAAK,CAACC;AAFP,K;;UAWRM,Q,GAAW,UAACC,UAAD,EAAaC,MAAb,EAAwB;AAC/B,UAAID,UAAU,KAAKE,mDAAOT,OAA1B,EAAkC;AAChC,cAAKU,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE,EAAb;AAAiBC,UAAAA,KAAK,EAAEN,KAAK,CAACC;AAA9B,SAAd;AACD,OAFD,MAEO,IAAIO,UAAU,KAAKE,mDAAOE,gBAA1B,EAA2C;AAChD,cAAKD,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE,GAAb;AAAkBC,UAAAA,KAAK,EAAEN,KAAK,CAACC;AAA/B,SAAd;AACD,OAFM,MAEA,IAAIO,UAAU,KAAKE,mDAAOG,cAA1B,EAAyC;AAC9C,cAAKF,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE,GAAb;AAAkBC,UAAAA,KAAK,EAAEN,KAAK,CAACE;AAA/B,SAAd;AACD;AACJ,K;;;;;;;SAdDY,iB,GAAA,6BAAmB;AACjB,SAAKC,WAAL,GAAmB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,qBAAjB,CAAuC,KAAKX,QAA5C,CAAnB;AACD,G;;SACDY,oB,GAAA,gCAAsB;AACpB,SAAKJ,WAAL;AACD,G;;SAWDK,M,GAAA,kBAAQ;AAAA,sBACuB,KAAKhB,KAD5B;AAAA,QACEC,SADF,eACEA,SADF;AAAA,QACaC,KADb,eACaA,KADb;AAEN,WACE,gCAAC,wBAAD;AACG,MAAA,MAAM,EAAE,CADX;AAEG,MAAA,KAAK,EAAEA,KAFV;AAGG,MAAA,SAAS,EAAED;AAHd,MADF;AAOD,G;;;EA/B2BgB,gB;;eAkCflB,e","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { LoadingProgressActionTypes as Action } from '../../flux/actions/LoadingProgressActions';\r\nimport ProgressLine from '../zhn-atoms/ProgressLine';\r\n\r\nconst COLOR = {\r\n  LOADING : '#2f7ed8',\r\n  FAILED : '#ed5813'\r\n};\r\n\r\nclass LoadingProgress extends Component {\r\n  state = {\r\n    completed: 0,\r\n    color: COLOR.LOADING\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listenLoadingProgress(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n  _onStore = (actionType, option) => {\r\n      if (actionType === Action.LOADING){\r\n        this.setState({ completed: 35, color: COLOR.LOADING });\r\n      } else if (actionType === Action.LOADING_COMPLETE){\r\n        this.setState({ completed: 100, color: COLOR.LOADING });\r\n      } else if (actionType === Action.LOADING_FAILED){\r\n        this.setState({ completed: 100, color: COLOR.FAILED })\r\n      }\r\n  }\r\n\r\n  render(){\r\n    const { completed, color } = this.state;\r\n    return (\r\n      <ProgressLine\r\n         height={3}\r\n         color={color}\r\n         completed={completed}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadingProgress\r\n"],"file":"LoadingProgress.js"}