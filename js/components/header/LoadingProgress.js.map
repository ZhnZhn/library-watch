{"version":3,"sources":["../../../src/components/header/LoadingProgress.jsx"],"names":["COLOR","LOADING","FAILED","LoadingProgress","state","completed","color","_onStore","actionType","option","Action","setState","LOADING_COMPLETE","LOADING_FAILED","unsubscribe","props","store","listenLoadingProgress","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,QAAQ;AACZC,WAAU,SADE;AAEZC,UAAS;AAFG,CAAd;;IAKMC,e;;;;;;;;;;;;;;sNACJC,K,GAAQ;AACNC,iBAAW,CADL;AAENC,aAAON,MAAMC;AAFP,K,QAWRM,Q,GAAW,UAACC,UAAD,EAAaC,MAAb,EAAwB;AAC/B,UAAID,eAAeE,mDAAOT,OAA1B,EAAkC;AAChC,cAAKU,QAAL,CAAc,EAAEN,WAAW,EAAb,EAAiBC,OAAON,MAAMC,OAA9B,EAAd;AACD,OAFD,MAEO,IAAIO,eAAeE,mDAAOE,gBAA1B,EAA2C;AAChD,cAAKD,QAAL,CAAc,EAAEN,WAAW,GAAb,EAAkBC,OAAON,MAAMC,OAA/B,EAAd;AACD,OAFM,MAEA,IAAIO,eAAeE,mDAAOG,cAA1B,EAAyC;AAC9C,cAAKF,QAAL,CAAc,EAAEN,WAAW,GAAb,EAAkBC,OAAON,MAAME,MAA/B,EAAd;AACD;AACJ,K;;;;;wCAdkB;AACjB,WAAKY,WAAL,GAAmB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,qBAAjB,CAAuC,KAAKV,QAA5C,CAAnB;AACD;;;2CACqB;AACpB,WAAKO,WAAL;AACD;;;6BAWO;AAAA,mBACuB,KAAKV,KAD5B;AAAA,UACEC,SADF,UACEA,SADF;AAAA,UACaC,KADb,UACaA,KADb;;AAEN,aACE,8BAAC,sBAAD;AACG,gBAAQ,CADX;AAEG,eAAOA,KAFV;AAGG,mBAAWD;AAHd,QADF;AAOD;;;EA/B2Ba,gB;;kBAkCff,e","file":"LoadingProgress.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { LoadingProgressActionTypes as Action } from '../../flux/actions/LoadingProgressActions';\r\nimport ProgressLine from '../zhn-atoms/ProgressLine';\r\n\r\nconst COLOR = {\r\n  LOADING : '#2F7ED8',\r\n  FAILED : 'rgb(237, 88, 19)'\r\n};\r\n\r\nclass LoadingProgress extends Component {\r\n  state = {\r\n    completed: 0,\r\n    color: COLOR.LOADING\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listenLoadingProgress(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n  _onStore = (actionType, option) => {\r\n      if (actionType === Action.LOADING){\r\n        this.setState({ completed: 35, color: COLOR.LOADING });\r\n      } else if (actionType === Action.LOADING_COMPLETE){\r\n        this.setState({ completed: 100, color: COLOR.LOADING });\r\n      } else if (actionType === Action.LOADING_FAILED){\r\n        this.setState({ completed: 100, color: COLOR.FAILED })\r\n      }\r\n  }\r\n\r\n  render(){\r\n    const { completed, color } = this.state;\r\n    return (\r\n      <ProgressLine\r\n         height={3}\r\n         color={color}\r\n         completed={completed}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoadingProgress\r\n"]}