{"version":3,"sources":["../../src/api/GitHubApi.js"],"names":["_base","_rRequestTypeToUrl","GH_RELEASE_RECENT","option","repo","GH_TAGS","GH_SEARCH_INFO","GH_COMMITS","GH_ISSUES","GH_PULL_REQUESTS","GitHubApi","getRequestUrl","fnFactory","requestType","getOnCheckResponse","checkResponse","crKey"],"mappings":";;;;;;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA,IAAMA,QAAQ,wBAAd;;AAGA,IAAMC,qBAAqB;AACzBC,qBAAoB,2BAACC,MAAD,EAAY;AAC9B,WAAUH,KAAV,eAAyBG,OAAOC,IAAhC;AACD,GAHwB;AAIzBC,WAAU,iBAACF,MAAD,EAAY;AACpB,WAAUH,KAAV,eAAyBG,OAAOC,IAAhC;AACD,GANwB;AAOzBE,kBAAiB,wBAACH,MAAD,EAAY;AAC3B,WAAUH,KAAV,oCAA8CG,OAAOC,IAArD;AACD,GATwB;AAUzBG,cAAa,oBAACJ,MAAD,EAAY;AACvB,WAAUH,KAAV,eAAyBG,OAAOC,IAAhC;AACD,GAZwB;AAazBI,aAAY,mBAACL,MAAD,EAAY;AACtB,WAAUH,KAAV,eAAyBG,OAAOC,IAAhC;AACD,GAfwB;AAgBzBK,oBAAmB,0BAACN,MAAD,EAAY;AAC7B,WAAUH,KAAV,eAAyBG,OAAOC,IAAhC;AACD;AAlBwB,CAA3B;;AAqBA,IAAMM,YAAY;AACfC,eADe,yBACDR,MADC,EACM;AACnB,QAAMS,YAAYX,mBAAmBE,OAAOU,WAA1B,CAAlB;AACA,WAAOD,UAAUT,MAAV,CAAP;AACD,GAJc;AAKfW,oBALe,gCAKK;AAClB,WAAOJ,UAAUK,aAAjB;AACD,GAPc;AAQfC,OARe,uBAQa;AAAA,QAApBZ,IAAoB,QAApBA,IAAoB;AAAA,QAAdS,WAAc,QAAdA,WAAc;;AAC1B,WAAUT,IAAV,SAAkBS,WAAlB;AACD,GAVc;AAYfE,eAZe,2BAYA;AACZ,WAAO,IAAP;AACF;AAdc,CAAlB;;kBAkBeL,S","file":"GitHubApi.js","sourcesContent":["\r\n// repos/:owner/:repo/releases/latest\r\n\r\n//  repos/:owner/:repo/git/refs/tags\r\n\r\n// GET /repos/:owner/:repo/releases/tags/:tag\r\n\r\n// repo\r\n// https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc\r\n\r\n\r\n// commit descr url, (sha), html_url\r\n//https://api.github.com/repos/lodash/lodash/commits/fc734a63717e2f29268eb79a161daaa6a9107d02\r\n\r\n// /repos/:owner/:repo/issues\r\n\r\nconst _base = 'https://api.github.com'\r\n\r\n\r\nconst _rRequestTypeToUrl = {\r\n  GH_RELEASE_RECENT : (option) => {\r\n    return `${_base}/repos/${option.repo}/releases/latest`;\r\n  },\r\n  GH_TAGS : (option) => {\r\n    return `${_base}/repos/${option.repo}/tags`;\r\n  },\r\n  GH_SEARCH_INFO : (option) => {\r\n    return `${_base}/search/repositories?q=repo:${option.repo}`;\r\n  },\r\n  GH_COMMITS : (option) => {\r\n    return `${_base}/repos/${option.repo}/commits`;\r\n  },\r\n  GH_ISSUES : (option) => {\r\n    return `${_base}/repos/${option.repo}/issues`;\r\n  },\r\n  GH_PULL_REQUESTS : (option) => {\r\n    return `${_base}/repos/${option.repo}/pulls`;\r\n  }\r\n}\r\n\r\nconst GitHubApi = {\r\n   getRequestUrl(option){\r\n     const fnFactory = _rRequestTypeToUrl[option.requestType];\r\n     return fnFactory(option);\r\n   },\r\n   getOnCheckResponse(){\r\n     return GitHubApi.checkResponse;\r\n   },\r\n   crKey({ repo, requestType }){\r\n     return `${repo}_${requestType}`;\r\n   },\r\n\r\n   checkResponse(){\r\n      return true;\r\n   }\r\n\r\n};\r\n\r\nexport default GitHubApi\r\n"]}