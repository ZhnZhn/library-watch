{"version":3,"file":"StackExchangeApi.js","names":["_strFn","require","_apiFn","BASE_URL","DF_REQUEST_TYPE","_rRequestTypeToUrl","_ref","repo","sort","fromdate","todate","SE_SEARCH_QUESTIONS","_ref2","intitle","StackExchangeApi","getRequestUrl","fGetRequestUrl","crKey","_ref3","requestType","checkResponse","json","option","error_message","error_name","crErrMsg","setFirstToUpperCase","replace","_default","exports","default"],"sources":["../../src/api/StackExchangeApi.js"],"sourcesContent":["import { setFirstToUpperCase } from '../utils/strFn';\r\nimport {\r\n  fGetRequestUrl,\r\n  crErrMsg\r\n} from './apiFn';\r\n\r\nconst BASE_URL = \"https://api.stackexchange.com/2.2\"\r\n, DF_REQUEST_TYPE = 'SE_QUESTIONS';\r\n\r\n// /questions/{ids}/linked Get the questions that link to the questions identified by a set of ids.\r\n// /questions/{ids}/related Get the questions that are related to the questions identified by a set of ids.\r\n\r\nconst _rRequestTypeToUrl = {\r\n  [DF_REQUEST_TYPE] : ({\r\n    repo,\r\n    sort='week',\r\n    fromdate,\r\n    todate\r\n  }) => {\r\n    return `${BASE_URL}/questions?page=1&pagesize=50&order=desc&fromdate=${fromdate}&todate=${todate}&sort=${sort}&tagged=${repo || 'css'}&site=stackoverflow`;\r\n  },\r\n  SE_SEARCH_QUESTIONS : ({\r\n    repo='css',\r\n    intitle='',\r\n    sort='activity',\r\n    fromdate,\r\n    todate\r\n  }) => {\r\n    if (!repo && !intitle) { repo = 'css'; }\r\n    return `${BASE_URL}/search?page=1&pagesize=50&order=desc&fromdate=${fromdate}&todate=${todate}&sort=${sort}&tagged=${repo}&intitle=${intitle}&site=stackoverflow`;\r\n  }\r\n};\r\n\r\nconst StackExchangeApi = {\r\n   getRequestUrl: fGetRequestUrl(_rRequestTypeToUrl, DF_REQUEST_TYPE),\r\n\r\n   crKey({ repo, requestType }){\r\n     return `${repo}_${requestType}`;\r\n   },\r\n\r\n   checkResponse(json, option){\r\n     const {\r\n       error_message,\r\n       error_name=''\r\n     } = json || {}\r\n     if (error_message){\r\n       throw crErrMsg(\r\n         setFirstToUpperCase(error_name.replace('_', ' ')),\r\n         setFirstToUpperCase(error_message)\r\n       );\r\n     }\r\n     return true;\r\n   }\r\n};\r\n\r\nexport default StackExchangeApi\r\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAKA,MAAME,QAAQ,GAAG,mCAAmC;EAClDC,eAAe,GAAG,cAAc;;AAElC;AACA;;AAEA,MAAMC,kBAAkB,GAAG;EACzB,CAACD,eAAe,GAAIE,IAAA,IAKd;IAAA,IALe;MACnBC,IAAI;MACJC,IAAI,GAAC,MAAM;MACXC,QAAQ;MACRC;IACF,CAAC,GAAAJ,IAAA;IACC,OAAO,GAAGH,QAAQ,qDAAqDM,QAAQ,WAAWC,MAAM,SAASF,IAAI,WAAWD,IAAI,IAAI,KAAK,qBAAqB;EAC5J,CAAC;EACDI,mBAAmB,EAAGC,KAAA,IAMhB;IAAA,IANiB;MACrBL,IAAI,GAAC,KAAK;MACVM,OAAO,GAAC,EAAE;MACVL,IAAI,GAAC,UAAU;MACfC,QAAQ;MACRC;IACF,CAAC,GAAAE,KAAA;IACC,IAAI,CAACL,IAAI,IAAI,CAACM,OAAO,EAAE;MAAEN,IAAI,GAAG,KAAK;IAAE;IACvC,OAAO,GAAGJ,QAAQ,kDAAkDM,QAAQ,WAAWC,MAAM,SAASF,IAAI,WAAWD,IAAI,YAAYM,OAAO,qBAAqB;EACnK;AACF,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACtBC,aAAa,EAAE,IAAAC,qBAAc,EAACX,kBAAkB,EAAED,eAAe,CAAC;EAElEa,KAAKA,CAAAC,KAAA,EAAuB;IAAA,IAAtB;MAAEX,IAAI;MAAEY;IAAY,CAAC,GAAAD,KAAA;IACzB,OAAO,GAAGX,IAAI,IAAIY,WAAW,EAAE;EACjC,CAAC;EAEDC,aAAaA,CAACC,IAAI,EAAEC,MAAM,EAAC;IACzB,MAAM;MACJC,aAAa;MACbC,UAAU,GAAC;IACb,CAAC,GAAGH,IAAI,IAAI,CAAC,CAAC;IACd,IAAIE,aAAa,EAAC;MAChB,MAAM,IAAAE,eAAQ,EACZ,IAAAC,0BAAmB,EAACF,UAAU,CAACG,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EACjD,IAAAD,0BAAmB,EAACH,aAAa,CACnC,CAAC;IACH;IACA,OAAO,IAAI;EACb;AACH,CAAC;AAAC,IAAAK,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEahB,gBAAgB","ignoreList":[]}