{"version":3,"sources":["../../src/network/fnFetch.js"],"names":["CLICK_TIME_INTERVAL","MIN_FREQUENCY","LIMIT_REMAINING","DONE","ALERT_FREQUENCY","errCaption","message","ALERT_IN_PROGRESS","_recentUri","_recentTime","Date","now","_recentCall","_fnSetRecentCall","uri","time","_fnSetRecentDone","option","onCheckResponse","onFetch","onCompleted","onFailed","onCatch","_nowTime","undefined","error","loadingProgress","fetch","then","response","status","statusText","headers","limitRemaining","get","json","loadingProgressComplete","catch","loadingProgressFailed"],"mappings":"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","file":"fnFetch.js","sourcesContent":["import LoadingProgressActions from '../flux/actions/LoadingProgressActions';\r\n\r\nconst CLICK_TIME_INTERVAL = 300\r\n    , MIN_FREQUENCY = 3000\r\n    , LIMIT_REMAINING = 'X-RateLimit-Remaining'\r\n    , DONE = 'DONE'\r\n    , ALERT_FREQUENCY = {\r\n        errCaption : 'Load Frequency',\r\n        message : `Exceed item load frequency restriction of ${MIN_FREQUENCY/1000}s`\r\n    }\r\n    , ALERT_IN_PROGRESS = {\r\n         errCaption : 'Loading In Progress',\r\n         message : 'Loading data for this item in progress.\\nIt seems several clicks on button Load repeatedly happend.'\r\n    };\r\n\r\n\r\nlet _recentUri = DONE\r\n  , _recentTime = Date.now() - MIN_FREQUENCY\r\n  , _recentCall = _recentTime;\r\n\r\nconst _fnSetRecentCall = function(uri, time){\r\n  _recentUri = uri;\r\n  _recentCall = time\r\n}\r\nconst _fnSetRecentDone = function(uri, time){\r\n  _recentUri = uri;\r\n  _recentTime = time;\r\n}\r\n\r\nexport default ({\r\n   uri, option,\r\n   onCheckResponse, onFetch, onCompleted,\r\n   onFailed, onCatch\r\n }) => {\r\n  const _nowTime = Date.now()\r\n\r\n  if (_nowTime - _recentCall < CLICK_TIME_INTERVAL){\r\n    return undefined;\r\n  } else if (uri === _recentUri){\r\n    onCatch({ error : ALERT_IN_PROGRESS, option, onFailed });\r\n  } else if (_nowTime - _recentTime < MIN_FREQUENCY){\r\n    onCatch({ error : ALERT_FREQUENCY, option, onFailed });\r\n  } else {\r\n\r\n    _fnSetRecentCall(uri, _nowTime);\r\n    LoadingProgressActions.loadingProgress();\r\n\r\n    fetch(uri)\r\n      .then((response) => {\r\n        const { status, statusText, headers } = response;\r\n        option.limitRemaining = headers.get(LIMIT_REMAINING);\r\n        if (status>=200 && status<=400){\r\n          return response.json();\r\n        } else if (status>400 && status<500){\r\n           throw { errCaption : 'Request Error', message : `${status} : ${statusText}` }\r\n        } else if (status>=500 && status<600){\r\n           throw { errCaption : 'Response Error', message : `${status} : ${statusText}` }\r\n        }\r\n      })\r\n      .then((json) => {\r\n         if (onCheckResponse(json, option)){\r\n           onFetch({ json, option, onCompleted });\r\n         }\r\n\r\n         _fnSetRecentDone(DONE, _nowTime);\r\n         LoadingProgressActions.loadingProgressComplete();\r\n      })\r\n      .catch((error) => {\r\n         onCatch({ error, option, onFailed })\r\n\r\n         _fnSetRecentDone(DONE, _nowTime);\r\n         LoadingProgressActions.loadingProgressFailed();\r\n      })\r\n  }\r\n}\r\n"]}